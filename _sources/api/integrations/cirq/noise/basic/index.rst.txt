:py:mod:`integrations.cirq.noise.basic`
=======================================

.. py:module:: integrations.cirq.noise.basic


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   integrations.cirq.noise.basic.get_depolarizing_channel
   integrations.cirq.noise.basic.get_asymmetric_depolarize
   integrations.cirq.noise.basic.get_amplitude_damping
   integrations.cirq.noise.basic.get_phase_damping
   integrations.cirq.noise.basic.load_noise_model_from_json



.. py:function:: get_depolarizing_channel(T: float, t_gate: float = 1e-08) -> cirq.DepolarizingChannel

   Get the depolarizing channel

   :param T: Decoherence parameter (seconds)
   :type T: float


.. py:function:: get_asymmetric_depolarize(T_1: float, T_2: float, t_gate: float = 1e-08) -> cirq.AsymmetricDepolarizingChannel

   Creates a noise model that does both phase and amplitude damping but in the
       Pauli Twirling Approximation discussed in the following reference
       https://arxiv.org/pdf/1305.2021.pdf


   :param T_1: Relaxation time (seconds)
   :param T_2: dephasing time (seconds)
   :param t_gate: Discretized time step over which the relaxation occurs over (seconds)


.. py:function:: get_amplitude_damping(T_1: float, t_gate: float = 1e-08) -> cirq.AmplitudeDampingChannel

   Creates an amplitude damping noise model

   :param T_1: Relaxation time (seconds)
   :param t_gate: Discretized time step over which the relaxation occurs over (seconds)


.. py:function:: get_phase_damping(T_2: float, t_gate: float = 1e-08) -> cirq.PhaseDampingChannel

   Creates a dephasing noise model

   :param T_2: dephasing time (seconds)
   :param t_gate: Discretized time step over which the relaxation occurs over (seconds)


.. py:function:: load_noise_model_from_json(serialized_model: Union[Dict, str]) -> cirq.NOISE_MODEL_LIKE

   Loads a cirq noise model (version 2)

   :param serialized_model: json str representation of a cirq noise model

   Return
       noise_model (cirq.NoiseModel)



