:orphan:

:py:mod:`integrations.cirq.simulator._base`
===========================================

.. py:module:: integrations.cirq.simulator._base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   integrations.cirq.simulator._base.CirqBasedSimulator



Functions
~~~~~~~~~

.. autoapisummary::

   integrations.cirq.simulator._base.get_measurement_from_cirq_result_object



.. py:class:: CirqBasedSimulator(simulator, noise_model: cirq.NOISE_MODEL_LIKE = None, param_resolver: cirq.ParamResolverOrSimilarType = None, qubit_order=cirq.ops.QubitOrder.DEFAULT)

   Bases: :py:obj:`orquestra.quantum.api.backend.QuantumSimulator`

   .. py:attribute:: supports_batching
      :annotation: = True

      

   .. py:attribute:: batch_size
      

      

   .. py:method:: run_circuit_and_measure(circuit: orquestra.quantum.circuits.Circuit, n_samples: int) -> orquestra.quantum.measurements.Measurements

      Run a circuit and measure a certain number of bitstrings.

      :param circuit: the circuit to prepare the state.
      :param n_samples: number of bitstrings to measure. If None, `self.n_samples`
                        is used.

      :returns: A list of bitstrings.


   .. py:method:: run_circuitset_and_measure(circuitset: Sequence[orquestra.quantum.circuits.Circuit], n_samples: Sequence[int]) -> List[orquestra.quantum.measurements.Measurements]

      Run a set of circuits and measure a certain number of bitstrings.
      :param circuitset: a set of circuits to prepare the state.
      :param n_samples: number of bitstrings to measure. If None, `self.n_samples`
                        is used. If an iterable, its-ith element corresponds to number
                        of samples that will be taken from i-th circuit. If an int N,
                        each circuit in circuitset will be measured N times.

      :returns: a list of lists of bitstrings (a list of lists of tuples)


   .. py:method:: get_exact_expectation_values(circuit: orquestra.quantum.circuits.Circuit, qubit_operator: orquestra.quantum.wip.operators.PauliRepresentation) -> orquestra.quantum.measurements.ExpectationValues

      Compute exact expectation values with respect to given operator.

      :param circuit: the circuit to prepare the state
      :param qubit_operator: the operator to measure

      :returns: the expectation values of each term in the operator


   .. py:method:: get_exact_noisy_expectation_values(circuit: orquestra.quantum.circuits.Circuit, qubit_operator: orquestra.quantum.wip.operators.PauliRepresentation) -> orquestra.quantum.measurements.ExpectationValues

      Compute exact expectation values w.r.t. given operator in presence of noise.

      Note that this method can be used only if simulator's noise_model is not set
      to None.

      :param circuit: the circuit to prepare the state
      :param qubit_operator: the operator to measure

      :returns: the expectation values of each term in the operator

      :raises RuntimeError if this simulator's noise_model is None.:



.. py:function:: get_measurement_from_cirq_result_object(result_object: cirq.Result, n_qubits: int, n_samples: int) -> orquestra.quantum.measurements.Measurements

   Extract measurement bitstrings from cirq result object.

   :param result_object: object returned by Cirq simulator's run or run_batch.
   :param n_qubits: number of qubits in full circuit (before exporting to cirq).
   :param n_samples: number of measured samples

   :returns: Measurements.


