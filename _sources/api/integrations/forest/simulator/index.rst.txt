:py:mod:`integrations.forest.simulator`
=======================================

.. py:module:: integrations.forest.simulator


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   integrations.forest.simulator.ForestSimulator



Functions
~~~~~~~~~

.. autoapisummary::

   integrations.forest.simulator.kill_subprocesses
   integrations.forest.simulator.get_forest_connection



.. py:class:: ForestSimulator(device_name: str, seed: int = None, nthreads: int = 1)

   Bases: :py:obj:`orquestra.quantum.api.backend.QuantumSimulator`

   .. py:attribute:: supports_batching
      :annotation: = False

      

   .. py:method:: run_circuit_and_measure(circuit: orquestra.quantum.circuits.Circuit, n_samples: int) -> orquestra.quantum.measurements.Measurements

      Run a circuit and measure a certain number of bitstrings. Note: the number
      of bitstrings measured is derived from self.n_samples

      :param circuit: the circuit to prepare the state
      :param n_samples: The number of samples to measure.

      :returns: a list of bitstrings (a list of tuples)


   .. py:method:: get_exact_expectation_values(circuit: orquestra.quantum.circuits.Circuit, qubit_operator: orquestra.quantum.operators.PauliRepresentation) -> orquestra.quantum.measurements.ExpectationValues



.. py:function:: kill_subprocesses()

   Kills all instances of QVM and QUILC using pkill command.


.. py:function:: get_forest_connection(device_name: str, seed=None)

   Get a connection to a forest backend

   :param device_name: the device to connect to

   :returns: A connection to either a pyquil simulator or a QPU


