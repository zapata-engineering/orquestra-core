:py:mod:`opt.bqm.conversions`
=============================

.. py:module:: opt.bqm.conversions


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   opt.bqm.conversions.convert_qubo_to_paulisum
   opt.bqm.conversions.convert_paulisum_to_qubo
   opt.bqm.conversions.convert_sampleset_to_measurements
   opt.bqm.conversions.convert_measurements_to_sampleset



.. py:function:: convert_qubo_to_paulisum(qubo: dimod.BinaryQuadraticModel) -> orquestra.quantum.operators.PauliSum

   Converts dimod BinaryQuadraticModel to PauliSum object.

   The resulting PauliSum has the following property: for every
   bitstring, its expected value is the same as the energy of the original QUBO.
   In order to ensure this, we had to add a minus sign for the coefficients
   of the linear terms coming from dimod conversion.
   For more context about conventions used please refer to note in
   `convert_measurements_to_sampleset` docstring.

   :param qubo: Object we want to convert

   :returns: PauliSum representation of the input qubo.
   :rtype: PauliSum


.. py:function:: convert_paulisum_to_qubo(operator: orquestra.quantum.operators.PauliSum) -> dimod.BinaryQuadraticModel

   Converts an ising PauliSum to dimod BinaryQuadraticModel object.
   The resulting QUBO has the following property:
   For every bitstring, its energy is the same as the expected value of the original
   Ising Hamiltonian. For more context about conventions used please refer to note in
   `convert_measurements_to_sampleset` docstring.

   .. note::

      The conversion might not be 100% accurate due to performing floating point
      operations during conversion between Ising and QUBO models.

   :param operator: PauliSum we want to convert

   :returns: BinaryQuadraticModel representation of the input operator
   :rtype: qubo


.. py:function:: convert_sampleset_to_measurements(sampleset: dimod.SampleSet, change_bitstring_convention: bool = False) -> orquestra.quantum.measurements.Measurements

   Converts dimod SampleSet to orquestra.quantum Measurements.
   Works only for the sampleset with "BINARY" vartype and variables being range of
   integers starting from 0.

   .. note::

      Since Measurements doesn't hold information about the energy of the samples,
      this conversion is lossy. For more explanation regarding
      change_bitstring_convention please read docs of
      `convert_measurements_to_sampleset`.

   :param sampleset: SampleSet we want to convert
   :param change_bitstring_convention: whether to flip the bits in bitstrings to, depends
   :param on the convention one is using:
   :type on the convention one is using: see note


.. py:function:: convert_measurements_to_sampleset(measurements: orquestra.quantum.measurements.Measurements, bqm: Optional[dimod.BinaryQuadraticModel] = None, change_bitstring_convention: bool = False) -> dimod.SampleSet

   Converts dimod SampleSet to orquestra.quantum Measurements.
   If no bqm is specified, the vartype of the SampleSet will be "BINARY" and the
   energies will be NaN. If bqm is specified, its vartype will be preserved and
   the energy values will be calculated.

   .. note::

      The convention commonly used in quantum computing is that 0 in a bitstring
      represents eigenvalue 1 of an Ising Hamiltonian,and 1 represents eigenvalue -1.
      However, there is another convention, used in dimod, where the mapping is
      0 -> -1 and 1 -> 1 instead. Therefore if we try to use the bitstrings coming
      from solving the problem framed in one convention to evaluate energy for
      problem state in the second one, the results will be incorrect. This can be
      fixed with changing the value of `change_bitstring_convention` flag. Currently
      we changed the conventions appropriately in `convert_qubo_to_openfermion_ising`
      and `convert_openfermion_ising_to_qubo`, however, this still might be an issue
      in cases where qubo/Ising representation is created using different tools.
      It's hard to envision a specific example at the time of writing, but experience
      shows that it needs to be handled with caution.

   :param measurements: Measurements object to be converted
   :param bqm: if provided, SampleSet will include energy values for each sample.
   :param change_bitstring_convention: whether to flip the bits in bitstrings to, depends
                                       on the convention one is using (see note).

   :returns: SampleSet object


