:py:mod:`orquestra.integrations.braket.runner`
==============================================

.. py:module:: orquestra.integrations.braket.runner


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.integrations.braket.runner.BraketRunner



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.integrations.braket.runner.braket_local_runner
   orquestra.integrations.braket.runner.aws_runner
   orquestra.integrations.braket.runner.get_QPU_names



.. py:class:: BraketRunner(device: braket.devices.Device, noise_model: Optional[Type[braket.circuits.Noise]] = None, s3_destination_folder: Optional[Union[str, Tuple]] = None)

   Bases: :py:obj:`orquestra.quantum.api.circuit_runner.BaseCircuitRunner`

   ABC for implementing simple circuit runners.

   To implement this ABC, override at least `_run_and_measure` method.
   In addition, if your runner supports more sophisticated way of
   running multiple circuits in a batch, you can override the
   `_run_batch_and_measure` method.

   .. note::

      For purpose of counting executed jobs and circuits, this ABC
      makes assumption that each call to _run_and_measure constitutes
      a single job. If this assumption is not valid, you should avoid
      inheriting this class and instead implement CircuitRunner protocol
      separately.


.. py:function:: braket_local_runner(backend: Optional[str] = None, noise_model: Optional[Type[braket.circuits.Noise]] = None) -> BraketRunner

   Create a braket runner for Braket local simulator

   :param backend: name of the Braket local simulator
   :param noise_model: optional noise model for the simulator

   :returns: BraketRunner


.. py:function:: aws_runner(boto_session: boto3.Session, name: str = 'SV1', noise_model: Optional[Type[braket.circuits.Noise]] = None, s3_destination_folder: Optional[Union[str, Tuple]] = None) -> BraketRunner

   Create a braket runner for Braket on-demand simulators and QPU


   :param boto_session: boto session created by boto3.Session
   :param name: name of the QPU or on-demand simulator
   :param noise_model: optional argument to define the noise model.
   :param s3_destination_folder: The S3 location to save the task's
   :param results to. The name of the bucket can be supplied as a:
   :param string. The bucket name and the folder can be supplied:
   :param as a tuple. If nothing was provided:
   :param the results will be:
   :param stored in the default Braket bucket.:

   :returns: BraketRunner for on-demand simulator or QPU


.. py:function:: get_QPU_names(boto_session: boto3.Session) -> List[str]

   This function retrives the names of the QPUs
   that are available on Braket
   :param aws_session: Session created using boto3.Session:

   :returns: list of names for QPUs provided by Braket
   :rtype: List


