:orphan:

:py:mod:`orquestra.integrations.cirq.conversions._circuit_conversions`
======================================================================

.. py:module:: orquestra.integrations.cirq.conversions._circuit_conversions


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.integrations.cirq.conversions._circuit_conversions.NonNativeGate



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.integrations.cirq.conversions._circuit_conversions.angle_to_exponent
   orquestra.integrations.cirq.conversions._circuit_conversions.exponent_to_angle
   orquestra.integrations.cirq.conversions._circuit_conversions.make_rotation_factory
   orquestra.integrations.cirq.conversions._circuit_conversions.export_to_cirq
   orquestra.integrations.cirq.conversions._circuit_conversions.import_from_cirq



Attributes
~~~~~~~~~~

.. autoapisummary::

   orquestra.integrations.cirq.conversions._circuit_conversions.RotationGateFactory
   orquestra.integrations.cirq.conversions._circuit_conversions.ORQUESTRA_BUILTIN_GATE_NAME_TO_CIRQ_GATE
   orquestra.integrations.cirq.conversions._circuit_conversions.EIGENGATE_SPECIAL_CASES
   orquestra.integrations.cirq.conversions._circuit_conversions.EIGENGATE_ROTATIONS
   orquestra.integrations.cirq.conversions._circuit_conversions.CIRQ_GATE_SPECIAL_CASES
   orquestra.integrations.cirq.conversions._circuit_conversions.qubit_index


.. py:data:: RotationGateFactory
   

   

.. py:function:: angle_to_exponent(angle: orquestra.quantum.typing.Parameter) -> orquestra.quantum.typing.Parameter

   Convert exponent from Cirq gate to angle usable in rotation gates..

   :param angle: Exponent to be converted.

   :returns: angle divided by pi.

   .. rubric:: Notes

   Scaling of the angle preserves its "type", i.e. numerical angles
   are scaled by numerical approximation of pi, but symbolic ones
   are scaled by `sympy.pi`. Note that in case of sympy numbers,
   the results is a native float.

   This transformation might be viewed as the change of units from
   radians to pi * radians.


.. py:function:: exponent_to_angle(exponent: orquestra.quantum.typing.Parameter) -> orquestra.quantum.typing.Parameter

   Convert exponent from Cirq gate to angle usable in rotation gates..

   :param exponent: Exponent to be converted.

   :returns: exponent multiplied by pi.

   .. rubric:: Notes

   Scaling of the exponent preserves its "type", i.e. numerical exponents
   are scaled by numerical approximation of pi, but symbolic ones
   are scaled by sympy.pi


.. py:function:: make_rotation_factory(eigengate_cls: Type[cirq.EigenGate], global_shift: float = 0) -> RotationGateFactory

   Construct a factory for rotation gate based on given EigenGate subclass.

   This function might be thought of as a partial which freezes global_shift
   parameter but also scales the exponent parameter of eigengate_cls initializer.

   :param eigengate_cls: EigenGate subclass, e.g. ZPowGate, XXPowGate.
   :param global_shift: Determines phase of the rotation gate. Check Cirq docs
                        for explanation.

   :returns: A function that maps angle to EigenGate instance with given global shift
             and an exponent equal to angle divided by a factor of pi.


.. py:data:: ORQUESTRA_BUILTIN_GATE_NAME_TO_CIRQ_GATE
   :annotation: :Dict[str, Callable]

   

.. py:data:: EIGENGATE_SPECIAL_CASES
   

   

.. py:data:: EIGENGATE_ROTATIONS
   

   

.. py:data:: CIRQ_GATE_SPECIAL_CASES
   

   

.. py:data:: qubit_index
   

   

.. py:function:: export_to_cirq(gate: orquestra.quantum.circuits._gates.Gate) -> cirq.Gate
              export_to_cirq(gate_operation: orquestra.quantum.circuits._gates.GateOperation) -> cirq.GateOperation
              export_to_cirq(circuit: orquestra.quantum.circuits._circuit.Circuit) -> cirq.Circuit

   Export given native Orquestra object to its Cirq equivalent.

   This should be primarily used with Circuit objects, but
   also works for builtin gates and gate operations.

   Exporting of user-defined gates is atm not supported.


.. py:function:: import_from_cirq(obj)

   Import given Cirq object, converting it to its Orquestra counterpart.

   Gates corresponding to Orquestra built-in gates, operations on such gates and
   circuits composed of such gates will use the native definitions, e.g. `cirq.X` will
   become `circuits.X`.

   Importing gates from Cirq that don't have built-in counterparts in Orquestra will
   result in custom gates. See `help(orquestra.quantum.circuits)` for examples of
   custom gates.

   Also note that only objects using only LineQubits are supported, as currently there
   is no notion of GridQubit in Orquestra circuits.


.. py:class:: NonNativeGate

   .. py:attribute:: matrix
      :annotation: :numpy.ndarray

      

   .. py:attribute:: cirq_class
      :annotation: :type

      


