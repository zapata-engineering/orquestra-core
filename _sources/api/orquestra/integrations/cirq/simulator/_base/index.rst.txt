:orphan:

:py:mod:`orquestra.integrations.cirq.simulator._base`
=====================================================

.. py:module:: orquestra.integrations.cirq.simulator._base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.integrations.cirq.simulator._base.CirqBasedSimulator



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.integrations.cirq.simulator._base.get_measurement_from_cirq_result_object



.. py:class:: CirqBasedSimulator(simulator, noise_model: cirq.NOISE_MODEL_LIKE = None, param_resolver: cirq.ParamResolverOrSimilarType = None, qubit_order=cirq.ops.QubitOrder.DEFAULT, normalize_wavefunction: bool = False)

   Bases: :py:obj:`orquestra.quantum.api.wavefunction_simulator.BaseWavefunctionSimulator`

   ABC for implementing simple wavefunction simulators.

   This ABC is build around _get_wavefunction_from_native_circuit
   method. In general, most simulators wrap some third-party resource (
   a library, service, API etc.), which can only consume circuits comprising
   operations from a given set. Such operations are called "native" to
   the given simulator, whereas other operations are called "nonnative".

   The idea of simulating arbitrary circuit is thus as follows:
   - split circuit into alternating consecutive parts of only native and
     only "nonnative" operations.
   - start with some initial state
   - for each part:
     - if it is native, run it via third-party resource, save the new
       statevector
     - if it is nonnative, apply each operation in the sequence using
       operation.apply(previous_statevector). Save the new statevector.
     Last saved statevector is the wavefunction of the total circuit.

     For this to work, subclasses of this ABC should implement
     _get_wavefunction_from_the_native_circuit method.

     Note:
         Since this class inherits all the limitations of BaseCircuitRunner.
         The _run_and_measure function is implemented via sampling from the
         wavefunction. Care must be taken when using third-party service that
         implements more sophisticated/more performant sampling method not
         involving direct computation of the whole wavefunction. In such cases,
         using BaseWavefunctionSimulator ABC will likely result in huge
         performance hit.

   .. py:attribute:: supports_batching
      :annotation: = True

      

   .. py:attribute:: batch_size
      

      

   .. py:method:: get_exact_noisy_expectation_values(circuit: orquestra.quantum.circuits.Circuit, qubit_operator: orquestra.quantum.operators.PauliRepresentation) -> orquestra.quantum.measurements.ExpectationValues

      Compute exact expectation values w.r.t. given operator in presence of noise.

      Note that this method can be used only if simulator's noise_model is not set
      to None.

      :param circuit: the circuit to prepare the state
      :param qubit_operator: the operator to measure

      :returns: the expectation values of each term in the operator

      :raises RuntimeError if this simulator's noise_model is None.:



.. py:function:: get_measurement_from_cirq_result_object(result_object: cirq.Result, n_qubits: int, n_samples: int) -> orquestra.quantum.measurements.Measurements

   Extract measurement bitstrings from cirq result object.
   :param result_object: object returned by Cirq simulator's run or run_batch.
   :param n_qubits: number of qubits in full circuit (before exporting to cirq).
   :param n_samples: number of measured samples

   :returns: Measurements.


