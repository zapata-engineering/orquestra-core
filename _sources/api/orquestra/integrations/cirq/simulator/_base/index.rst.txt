:orphan:

:py:mod:`orquestra.integrations.cirq.simulator._base`
=====================================================

.. py:module:: orquestra.integrations.cirq.simulator._base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.integrations.cirq.simulator._base.CirqBasedSimulator



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.integrations.cirq.simulator._base.get_measurement_from_cirq_result_object



.. py:class:: CirqBasedSimulator(simulator, noise_model: cirq.NOISE_MODEL_LIKE = None, param_resolver: cirq.ParamResolverOrSimilarType = None, qubit_order=cirq.ops.QubitOrder.DEFAULT, normalize_wavefunction: bool = False)

   Bases: :py:obj:`orquestra.quantum.api.wavefunction_simulator.BaseWavefunctionSimulator`

   ABC for all Cirq based simulators.

   .. py:attribute:: supports_batching
      :annotation: = True

      

   .. py:attribute:: batch_size
      

      

   .. py:method:: get_exact_noisy_expectation_values(circuit: orquestra.quantum.circuits.Circuit, qubit_operator: orquestra.quantum.operators.PauliRepresentation) -> orquestra.quantum.measurements.ExpectationValues

      Compute exact expectation values w.r.t. given operator in presence of noise.

      Note that this method can be used only if simulator's noise_model is not set
      to None.

      :param circuit: the circuit to prepare the state
      :param qubit_operator: the operator to measure

      :returns: the expectation values of each term in the operator

      :raises RuntimeError if this simulator's noise_model is None.:



.. py:function:: get_measurement_from_cirq_result_object(result_object: cirq.Result, n_qubits: int, n_samples: int) -> orquestra.quantum.measurements.Measurements

   Extract measurement bitstrings from cirq result object.
   :param result_object: object returned by Cirq simulator's run or run_batch.
   :param n_qubits: number of qubits in full circuit (before exporting to cirq).
   :param n_samples: number of measured samples

   :returns: Measurements.


