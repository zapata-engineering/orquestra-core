:orphan:

:py:mod:`orquestra.integrations.custatevec.simulator._custatevec`
=================================================================

.. py:module:: orquestra.integrations.custatevec.simulator._custatevec


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.integrations.custatevec.simulator._custatevec.CuStateVecSimulator




.. py:class:: CuStateVecSimulator(noise_model=None, param_resolver: Optional[cirq.ParamResolverOrSimilarType] = None, qubit_order=cirq.ops.QubitOrder.DEFAULT, seed: cirq.RANDOM_STATE_OR_SEED_LIKE = None, circuit_memoization_size: int = 0, qsim_options: Optional[qsimcirq.QSimOptions] = None)

   Bases: :py:obj:`orquestra.integrations.cirq.simulator._qsim_simulator.QSimSimulator`

   Qsimcirq simulator that using Nvidia GPUs for all simulations.

   CUDA toolkit and some dependency tools must be installed. The installation
   guidelines are provided in https://quantumai.google/qsim/tutorials/gcp_gpu.

   :param noise_model: an optional noise model to pass in for noisy simulations
   :param param_resolver: Optional arg that defines the parameters to run with
                          the program.
   :param qubit_order: Optional arg that defines the ordering of qubits.
   :param seed: seed for random number generator.
   :param circuit_memoization_size: Optional arg tht defines the number of
                                    last translated circuits to be memoized from simulation executions,
                                    to eliminate translation overhead.
   :param qsim_options: An options dict or QSimOptions object with options
                        to use for all circuits run using this simulator. See QSimOptions from
                        qsimcirq for more details.

   .. py:attribute:: supports_batching
      :annotation: = True

      

   .. py:attribute:: batch_size
      

      


