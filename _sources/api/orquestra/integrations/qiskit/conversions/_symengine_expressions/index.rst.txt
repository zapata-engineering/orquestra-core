:orphan:

:py:mod:`orquestra.integrations.qiskit.conversions._symengine_expressions`
==========================================================================

.. py:module:: orquestra.integrations.qiskit.conversions._symengine_expressions

.. autoapi-nested-parse::

   Utilities for converting symengine expressions to our native Expression format.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.integrations.qiskit.conversions._symengine_expressions.is_multiplication_by_reciprocal
   orquestra.integrations.qiskit.conversions._symengine_expressions.is_right_addition_of_negation
   orquestra.integrations.qiskit.conversions._symengine_expressions.is_left_addition_of_negation
   orquestra.integrations.qiskit.conversions._symengine_expressions.expression_from_symengine
   orquestra.integrations.qiskit.conversions._symengine_expressions.identity
   orquestra.integrations.qiskit.conversions._symengine_expressions.symbol_from_symengine
   orquestra.integrations.qiskit.conversions._symengine_expressions.native_integer_from_symengine_integer
   orquestra.integrations.qiskit.conversions._symengine_expressions.native_float_from_symengine_float
   orquestra.integrations.qiskit.conversions._symengine_expressions.native_float_from_symengine_rational
   orquestra.integrations.qiskit.conversions._symengine_expressions.native_imaginary_unit_from_symengine_imaginary_unit
   orquestra.integrations.qiskit.conversions._symengine_expressions.addition_from_symengine_add
   orquestra.integrations.qiskit.conversions._symengine_expressions.multiplication_from_symengine_mul
   orquestra.integrations.qiskit.conversions._symengine_expressions.power_from_symengine_pow
   orquestra.integrations.qiskit.conversions._symengine_expressions.function_call_from_symengine_function
   orquestra.integrations.qiskit.conversions._symengine_expressions.expression_tuple_from_tuple_of_symengine_args



Attributes
~~~~~~~~~~

.. autoapisummary::

   orquestra.integrations.qiskit.conversions._symengine_expressions.SYMENGINE_DIALECT


.. py:function:: is_multiplication_by_reciprocal(symengine_mul: symengine.Mul) -> bool

   Check if given symengine multiplication is of the form x * (1 / y).


.. py:function:: is_right_addition_of_negation(symengine_add: symengine.Add) -> bool

   Check if given symengine addition is of the form x + (-y).


.. py:function:: is_left_addition_of_negation(symengine_add: symengine.Add) -> bool

   Check if given symengine addition is of the form (-x) + y.


.. py:function:: expression_from_symengine(expression)

   Parse symengine expression into intermediate expression tree.


.. py:function:: identity(number: numbers.Number)


.. py:function:: symbol_from_symengine(symbol: symengine.Symbol)


.. py:function:: native_integer_from_symengine_integer(number: symengine.Integer)


.. py:function:: native_float_from_symengine_float(number: symengine.Float)


.. py:function:: native_float_from_symengine_rational(number: symengine.Rational)


.. py:function:: native_imaginary_unit_from_symengine_imaginary_unit(_unit: symengine.lib.symengine_wrapper.ImaginaryUnit)


.. py:function:: addition_from_symengine_add(add: symengine.Add)


.. py:function:: multiplication_from_symengine_mul(mul: symengine.Mul)


.. py:function:: power_from_symengine_pow(power: symengine.Pow)


.. py:function:: function_call_from_symengine_function(function: symengine.Function)


.. py:function:: expression_tuple_from_tuple_of_symengine_args(args: tuple)


.. py:data:: SYMENGINE_DIALECT
   

   

