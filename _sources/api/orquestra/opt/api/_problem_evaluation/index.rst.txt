:orphan:

:py:mod:`orquestra.opt.api._problem_evaluation`
===============================================

.. py:module:: orquestra.opt.api._problem_evaluation


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.opt.api._problem_evaluation.solve_problem_by_exhaustive_search
   orquestra.opt.api._problem_evaluation.solve_graph_problem_by_exhaustive_search
   orquestra.opt.api._problem_evaluation.evaluate_solution



.. py:function:: solve_problem_by_exhaustive_search(hamiltonian: orquestra.quantum.operators.PauliSum) -> Tuple[float, List[Tuple[int, Ellipsis]]]

   Solves any QAOA cost hamiltonian using exhaustive search.

   It searches for degeneracy and returns all the best solutions if more than one
   exists.

   :param hamiltonian: cost hamiltonian

   :returns:

             - value of the best solution
             - list of solutions which correspond to the best value, each solution is a
               tuple of ints.
   :rtype: A tuple with the following two elements


.. py:function:: solve_graph_problem_by_exhaustive_search(graph: networkx.Graph, cost_function: Callable[[Tuple[int], networkx.Graph], float]) -> Tuple[float, List[Tuple[int, Ellipsis]]]

   Solves given graph problem using exhaustive search.

   It searches for degeneracy and returns all the best solutions if more than one
   exists.

   :param graph: graph for which we want to solve the problem
   :param cost_function: function which calculates the cost of solution of a given
                         problem.

   :returns:

             - value of the best solution
             - list of solutions which correspond to the best value, each solution is a
               tuple of ints.
   :rtype: A tuple with the following two elements


.. py:function:: evaluate_solution(solution: Tuple[int], graph: networkx.Graph, get_hamiltonian: Callable[[networkx.Graph], orquestra.quantum.operators.PauliSum]) -> float

   Evaluate expectation value of hamiltonian for given solution of a graph problem.

   :param solution: solution to a problem as a tuple of bits
   :param graph: a graph for which we want to solve the problem
   :param get_hamiltonian: function which translates graph into a Hamiltonian representing
                           a problem.

   :returns: value of a solution.
   :rtype: float


