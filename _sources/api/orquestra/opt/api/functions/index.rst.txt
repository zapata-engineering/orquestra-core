:py:mod:`orquestra.opt.api.functions`
=====================================

.. py:module:: orquestra.opt.api.functions

.. autoapi-nested-parse::

   Protocols describing different kinds of functions.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.opt.api.functions.StoreArtifact
   orquestra.opt.api.functions.CallableWithGradient
   orquestra.opt.api.functions.CallableStoringArtifacts
   orquestra.opt.api.functions.CallableWithGradientStoringArtifacts
   orquestra.opt.api.functions.FunctionWithGradient
   orquestra.opt.api.functions.FunctionWithGradientStoringArtifacts



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.opt.api.functions.has_store_artifact_param
   orquestra.opt.api.functions.function_with_gradient



Attributes
~~~~~~~~~~

.. autoapisummary::

   orquestra.opt.api.functions.T
   orquestra.opt.api.functions.S


.. py:data:: T
   

   

.. py:data:: S
   

   

.. py:class:: StoreArtifact

   Bases: :py:obj:`Protocol`

   A protocol describing how the artifacts are stored.


.. py:class:: CallableWithGradient

   Bases: :py:obj:`Protocol`

   A callable with gradient.

   .. py:method:: gradient(params: numpy.ndarray) -> numpy.ndarray



.. py:class:: CallableStoringArtifacts

   Bases: :py:obj:`Protocol`\ [\ :py:obj:`S`\ , :py:obj:`T`\ ]

   A callable that stores artifacts.


.. py:class:: CallableWithGradientStoringArtifacts

   Bases: :py:obj:`CallableStoringArtifacts`\ [\ :py:obj:`numpy.ndarray`\ , :py:obj:`T`\ ], :py:obj:`Protocol`

   A callable with gradient that stored artifacts.

   .. py:method:: gradient(params: numpy.ndarray) -> numpy.ndarray



.. py:function:: has_store_artifact_param(function) -> bool

   Determine if given callable is capable of storing artifacts.

   :param function: a callable to be checked.
   :return: True, if `function` has store_artifact parameter and False otherwise.


.. py:class:: FunctionWithGradient

   Bases: :py:obj:`NamedTuple`

   A callable with gradient.

   .. py:attribute:: function
      :annotation: :Callable[[numpy.ndarray], float]

      

   .. py:attribute:: gradient
      :annotation: :Callable[[numpy.ndarray], numpy.ndarray]

      


.. py:class:: FunctionWithGradientStoringArtifacts

   Bases: :py:obj:`NamedTuple`

   A callable with gradient that also stores artifacts.

   .. py:attribute:: function
      :annotation: :CallableStoringArtifacts

      

   .. py:attribute:: gradient
      :annotation: :Callable[[numpy.ndarray], numpy.ndarray]

      


.. py:function:: function_with_gradient(function: Union[Callable[[numpy.ndarray], float], CallableStoringArtifacts], gradient: Callable[[numpy.ndarray], numpy.ndarray]) -> Union[FunctionWithGradient, FunctionWithGradientStoringArtifacts]

   Combine function and gradient into an entity adhering to protocols used by
   history recorder.

   Note that this is a preferred method for adding gradient to your function,
   as it should automatically detect whether the function stores artifact or not.


