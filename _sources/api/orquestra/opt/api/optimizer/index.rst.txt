:py:mod:`orquestra.opt.api.optimizer`
=====================================

.. py:module:: orquestra.opt.api.optimizer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.opt.api.optimizer.Optimizer
   orquestra.opt.api.optimizer.NestedOptimizer



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.opt.api.optimizer.optimization_result
   orquestra.opt.api.optimizer.construct_history_info
   orquestra.opt.api.optimizer.extend_histories



.. py:class:: Optimizer(recorder: orquestra.opt.history.recorder.RecorderFactory = _recorder)

   Bases: :py:obj:`abc.ABC`

   Interface for implementing different optimizers.

   :param recorder: recorder object which defines how to store the optimization history.

   .. py:method:: minimize(cost_function: orquestra.opt.api.cost_function.CostFunction, initial_params: numpy.ndarray, keep_history: bool = False) -> scipy.optimize.OptimizeResult

      Finds the parameters which minimize given cost function.

      :param cost_function: an object representing the cost function.
      :param initial_params: initial parameters for the cost function.
      :param keep_history: flag indicating whether history of cost function
                           evaluations should be recorded.



.. py:function:: optimization_result(*, opt_value, opt_params, **kwargs) -> scipy.optimize.OptimizeResult

   Construct instance of OptimizeResult.

   The purpose of this function is to add a safety layer by detecting if required
   components of OptimizationResult are missing already during static analysis.

   :param opt_value: the final value of the function being optimized.
   :param opt_params: the parameters (arguments) for which opt_value has been achieved.
   :param kwargs: other attributes (e.g. history) that should be stored in OptimizeResult.

   :returns: An instance of OptimizeResult containing opt_value, opt_params and all of the
             other passed arguments.


.. py:function:: construct_history_info(cost_function: orquestra.opt.api.cost_function.CostFunction, keep_history: bool) -> Dict[str, orquestra.opt.history.recorder.AnyHistory]


.. py:function:: extend_histories(cost_function: orquestra.opt.history.recorder.AnyRecorder, histories: Dict[str, List]) -> Dict[str, List]


.. py:class:: NestedOptimizer

   Bases: :py:obj:`abc.ABC`

   Optimizers that modify cost function throughout optimization.
   An example of such optimizer could be on that freezes certain
   parameters during every iteration or adds new layers of
   the underlying circuit (so called layer-by-layer optimization).

   See MockNestedOptimizer in orquestra.opt.mock_objects for an example.

   :param inner_optimizer: Optimizer object used in the inner optimization loop.
   :param recorder: recorder object which defines how to store the optimization history.

   :returns:

             - opt_value: optimal value of the objective function
             - opt_params: corresponding optimal parameters
             - nit: total number of iterations of inner_optimizer,
             - nfev: total number of calls to cost function,
             - history: a list of HistoryEntrys.
               If keep_history is False this should be an empty list.
             - gradient_history: if the cost function is a FunctionWithGradient,
               this should be a list of HistoryEntrys representing
               previous calls to the gradient.
   :rtype: An instance of OptimizeResult containing

   .. py:method:: inner_optimizer() -> Optimizer
      :property:

      Inner optimizer used by this optimizer.


   .. py:method:: recorder() -> orquestra.opt.history.recorder.RecorderFactory
      :property:

      Factory for creating recorders of functions being minimized.


   .. py:method:: minimize(cost_function_factory: Callable[Ellipsis, orquestra.opt.api.cost_function.CostFunction], initial_params: numpy.ndarray, keep_history: bool = False) -> scipy.optimize.OptimizeResult

      Finds optimal parameters to minimize the cost function factory.

      :param cost_function_factory: function that generates CostFunction objects.
      :param initial_params: initial parameters used for optimization
      :param keep_history: flag indicating whether history of cost function
                           evaluations should be recorded.



