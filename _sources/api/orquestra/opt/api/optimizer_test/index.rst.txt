:py:mod:`orquestra.opt.api.optimizer_test`
==========================================

.. py:module:: orquestra.opt.api.optimizer_test

.. autoapi-nested-parse::

   Test case prototypes that can be used in other projects.

   Note that this file won't be executed on its own by pytest.
   You need to define your own test cases that inherit from the ones defined here.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.opt.api.optimizer_test.sum_x_squared
   orquestra.opt.api.optimizer_test.rosenbrock_function



Attributes
~~~~~~~~~~

.. autoapisummary::

   orquestra.opt.api.optimizer_test.MANDATORY_OPTIMIZATION_RESULT_FIELDS
   orquestra.opt.api.optimizer_test.OPTIMIZER_CONTRACTS
   orquestra.opt.api.optimizer_test.NESTED_OPTIMIZER_CONTRACTS


.. py:data:: MANDATORY_OPTIMIZATION_RESULT_FIELDS
   :annotation: = ['nfev', 'nit', 'opt_value', 'opt_params', 'history']

   

.. py:function:: sum_x_squared(x: numpy.ndarray) -> float


.. py:function:: rosenbrock_function(x: numpy.ndarray) -> float


.. py:data:: OPTIMIZER_CONTRACTS
   

   Contracts for instances of the NestedOptimizer base class that can be used in
   other projects.

   Usage:

       .. code:: python

          from orquestra.opt.api.optimizer_test import NESTED_OPTIMIZER_CONTRACTS

          @pytest.mark.parametrize("contract", NESTED_OPTIMIZER_CONTRACTS)
          def test_nestedoptimizer_contract(contract):
              optimizer = MockNestedOptimizer(inner_optimizer=MockOptimizer(), n_iters=5)
              cost_function_factory = ...
              initial_params = ...
              assert contract(optimizer, cost_function_factory, initial_params)

.. py:data:: NESTED_OPTIMIZER_CONTRACTS
   

   

