:py:mod:`orquestra.opt.bqm.io`
==============================

.. py:module:: orquestra.opt.bqm.io


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.opt.bqm.io.bqm_to_serializable
   orquestra.opt.bqm.io.bqm_from_serializable
   orquestra.opt.bqm.io.load_qubo
   orquestra.opt.bqm.io.save_qubo
   orquestra.opt.bqm.io.save_sampleset
   orquestra.opt.bqm.io.load_sampleset



.. py:function:: bqm_to_serializable(bqm: dimod.BinaryQuadraticModel) -> Dict[str, Any]

   Convert binary quadratic model to a serializable dictionary.

   :param bqm: binary quadratic model to convert

   :returns:

             - linear: list of pairs (i, a_i), where a_i is linear coefficient
               corresponding to variable i,
             - quadratic: list of triples (i, j, b_ij) where b_ij is quadratic
               coefficient corresponding to variables i < j,
             - offset: offset taken from the model.
             - vartype: field determining whether variables in the model are
               from the set {-1, 1} ("SPIN") or the set {0, 1} ("BINARY").
   :rtype: Dictionary with the following keys

   .. rubric:: Notes

   A list of tuples was chosen instead of dictionary because dictionary
   keyed with tuples is not JSON-serializable.


.. py:function:: bqm_from_serializable(serializable: Dict[str, Any]) -> dimod.BinaryQuadraticModel

   Create a binary quadratic model from serializable dictionary.

   :param serializable: dictionary representing BQM. The expected format
   :param of this dictionary as the same as the output format of:
   :param `bqm_to_serializable`.:

   :returns: Binary quadratic model converted from the input dictionary.


.. py:function:: load_qubo(input_file: orquestra.quantum.typing.LoadSource)


.. py:function:: save_qubo(qubo, output_file: orquestra.quantum.typing.DumpTarget)


.. py:function:: save_sampleset(sampleset, output_file: orquestra.quantum.typing.DumpTarget)


.. py:function:: load_sampleset(input_file: orquestra.quantum.typing.LoadSource)


