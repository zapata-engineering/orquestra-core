:py:mod:`orquestra.opt.history`
===============================

.. py:module:: orquestra.opt.history


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   recorder/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.opt.history.ArtifactRecorder
   orquestra.opt.history.ArtifactRecorderWithGradient
   orquestra.opt.history.SimpleRecorder
   orquestra.opt.history.SimpleRecorderWithGradient



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.opt.history.recorder



.. py:class:: ArtifactRecorder

   Bases: :py:obj:`Protocol`\ [\ :py:obj:`S`\ , :py:obj:`T`\ ]

   A protocol representing recorders that can store artifacts.

   It is like simple recorder, but its target has to be a CallableStoringArtifacts.
   It also stores a list of HistoryEntryWithArtifact objects instead of usual
   HistoryEntry ones.

   .. py:method:: target() -> orquestra.opt.api.functions.CallableStoringArtifacts[S, T]
      :property:


   .. py:method:: history() -> Sequence[HistoryEntryWithArtifacts]
      :property:



.. py:class:: ArtifactRecorderWithGradient

   Bases: :py:obj:`Protocol`

   Protocol for recorders wrapping functions having gradient and storing artifacts.

   It is the most narrow type of recorder, combining both the
   SimpleReorderWithGradient and Artifact recorder. Hence, this recorder is
   non-generic and stores history entries with artifacts.

   .. py:method:: target() -> orquestra.opt.api.functions.CallableWithGradientStoringArtifacts
      :property:


   .. py:method:: gradient() -> SimpleRecorder[numpy.ndarray, numpy.ndarray]
      :property:


   .. py:method:: history() -> Sequence[HistoryEntryWithArtifacts]
      :property:



.. py:class:: SimpleRecorder

   Bases: :py:obj:`Protocol`\ [\ :py:obj:`S`\ , :py:obj:`T`\ ]

   Protocol representing recorder with basic functionalities.

   Simple recorders have target and history attributes. They forward calls made
   to them to the target.

   The target property is exposed so that clients have access to an unwrapped
   callable in case they need to make a call that is not recorder.

   Note that this recorder is structurally a base protocol for any other
   types of recorders. In other words  every recorder is at least a SimpleRecorder.

   .. py:method:: target() -> Callable[[S], T]
      :property:


   .. py:method:: history() -> Sequence[HistoryEntry]
      :property:



.. py:class:: SimpleRecorderWithGradient

   Bases: :py:obj:`Protocol`

   A protocol representing recorders wrapping functions with gradients.

   Aside the attributes of SimpleRecorder, this recorder also has a gradient
   attribute which itself is a recorder (and hence, has its own `history`
   attribute.

   Note that this protocol is not generic, because we only define gradients
   for functions from R^N to R (which translates to Callable[[ndarray], float]).

   .. py:method:: target() -> Callable[[numpy.ndarray], float]
      :property:


   .. py:method:: gradient() -> SimpleRecorder[numpy.ndarray, numpy.ndarray]
      :property:


   .. py:method:: history() -> Sequence[HistoryEntry]
      :property:



.. py:function:: recorder(function: orquestra.opt.api.functions.CallableWithGradientStoringArtifacts, save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> ArtifactRecorderWithGradient
              recorder(function: orquestra.opt.api.functions.CallableStoringArtifacts[S, T], save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> ArtifactRecorder[S, T]
              recorder(function: orquestra.opt.api.functions.CallableWithGradient, save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> SimpleRecorderWithGradient
              recorder(function: Callable[[S], T], save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> SimpleRecorder[S, T]

   Create a recorder that is suitable for recording calls to given callable.

   :param function: a callable to be recorded.
   :param save_condition: a condition on which the calls will be saved. See
                          `SaveCondition` protocol for explanation of this parameter. By default
                          all calls are saved.

   :returns: A callable object (the recorder) wrapping the `function`.
             The return type depends on the passed callable. See overloads defined
             above to check for available variants. Here is a summary:
             - recorder is always callable

             - if `function` has gradient, so does the recorder. Calls to gradient
               and calls made by gradient are NOT recorded.

             - if `function` has possibility to store artifacts (i.e. accepts
               `store_artifact` argument, then so does the recorder.


