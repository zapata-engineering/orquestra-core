:py:mod:`orquestra.opt.history`
===============================

.. py:module:: orquestra.opt.history


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   recorder/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.opt.history.ArtifactRecorder
   orquestra.opt.history.ArtifactRecorderWithGradient
   orquestra.opt.history.SimpleRecorder
   orquestra.opt.history.SimpleRecorderWithGradient



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.opt.history.recorder



.. py:class:: ArtifactRecorder(target: orquestra.opt.api.functions.CallableStoringArtifacts[S, T], save_condition: orquestra.opt.api.save_conditions.SaveCondition)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`S`\ , :py:obj:`T`\ ]

   A recorder saving history entries with artifacts.

   Parameters to initializer are the same as for `SimpleRecorder`,
   except the target function should now be capable of storing artifacts.


.. py:class:: ArtifactRecorderWithGradient(target: orquestra.opt.api.functions.CallableWithGradientStoringArtifacts, save_condition: orquestra.opt.api.save_conditions.SaveCondition)

   Bases: :py:obj:`ArtifactRecorder`

   A recorder storing history entries with artifacts supporting callables with
   gradient.


.. py:class:: SimpleRecorder(target: Callable[[S], T], save_condition: orquestra.opt.api.save_conditions.SaveCondition)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`S`\ , :py:obj:`T`\ ]

   A basic recorder that stores history entries.

   :param target: a target function. Calls to the recorder will be propagated to this
                  function.
   :param save_condition: a function determining whether given call should be saved
                          to the history. See respective protocol for explanation of this parameter.


.. py:class:: SimpleRecorderWithGradient(target: orquestra.opt.api.functions.CallableWithGradient, save_condition: orquestra.opt.api.save_conditions.SaveCondition)

   Bases: :py:obj:`SimpleRecorder`

   A recorder saving history entries that works with callables with gradient.

   Except having `gradient` attribute, this recorder is the same as `SimpleRecorder`.


.. py:function:: recorder(function: orquestra.opt.api.functions.CallableWithGradientStoringArtifacts, save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> ArtifactRecorderWithGradient
              recorder(function: orquestra.opt.api.functions.CallableStoringArtifacts[S, T], save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> ArtifactRecorder[S, T]
              recorder(function: orquestra.opt.api.functions.CallableWithGradient, save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> SimpleRecorderWithGradient
              recorder(function: Callable[[S], T], save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> SimpleRecorder[S, T]

   Create a recorder that is suitable for recording calls to given callable.

   :param function: a callable to be recorded.
   :param save_condition: a condition on which the calls will be saved. See
                          `SaveCondition` protocol for explanation of this parameter. By default
                          all calls are saved.

   :returns: A callable object (the recorder) wrapping the `function`.
             The return type depends on the passed callable. See overloads defined
             above to check for available variants. Here is a summary:
             - recorder is always callable
             - if `function` has gradient, so does the recorder. Calls to gradient
               and calls made by gradient are NOT recorded.
             - if `function` has possibility to store artifacts (i.e. accepts
               `store_artifact` argument, then so does the recorder.


