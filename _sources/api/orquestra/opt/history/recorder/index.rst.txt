:py:mod:`orquestra.opt.history.recorder`
========================================

.. py:module:: orquestra.opt.history.recorder

.. autoapi-nested-parse::

   Main implementation of the recorder.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.opt.history.recorder.ArtifactCollection
   orquestra.opt.history.recorder.HistoryEntryWithArtifacts
   orquestra.opt.history.recorder.HistoryEntry
   orquestra.opt.history.recorder.SimpleRecorder
   orquestra.opt.history.recorder.SimpleRecorderWithGradient
   orquestra.opt.history.recorder.ArtifactRecorder
   orquestra.opt.history.recorder.ArtifactRecorderWithGradient



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.opt.history.recorder.copy_recorder
   orquestra.opt.history.recorder.deepcopy_recorder
   orquestra.opt.history.recorder.store_artifact
   orquestra.opt.history.recorder.recorder



Attributes
~~~~~~~~~~

.. autoapisummary::

   orquestra.opt.history.recorder.T
   orquestra.opt.history.recorder.S
   orquestra.opt.history.recorder.NATIVE_RECORDER_ATTRIBUTES
   orquestra.opt.history.recorder.AnyRecorder
   orquestra.opt.history.recorder.RecorderFactory
   orquestra.opt.history.recorder.AnyHistory


.. py:data:: T
   

   

.. py:data:: S
   

   

.. py:data:: NATIVE_RECORDER_ATTRIBUTES
   :annotation: = ['predicate', 'history', 'target', 'call_number', 'gradient']

   

.. py:class:: ArtifactCollection

   Bases: :py:obj:`dict`

   A dict with additional `forced` attribute.

   The `forced` flag is set whenever an artifact is forced into the dictionary
   despite current save_condition being false.

   .. py:attribute:: forced
      :annotation: :bool = False

      


.. py:class:: HistoryEntryWithArtifacts

   Bases: :py:obj:`NamedTuple`

   A history entry enhanced with artifacts.

   .. py:attribute:: call_number
      :annotation: :int

      

   .. py:attribute:: params
      :annotation: :Any

      

   .. py:attribute:: value
      :annotation: :Any

      

   .. py:attribute:: artifacts
      :annotation: :Dict[str, Any]

      


.. py:class:: HistoryEntry

   Bases: :py:obj:`NamedTuple`

   A history entry storing call number, parameters and target function value.

   .. py:attribute:: call_number
      :annotation: :int

      

   .. py:attribute:: params
      :annotation: :Any

      

   .. py:attribute:: value
      :annotation: :Any

      


.. py:function:: copy_recorder(recorder_to_copy)


.. py:function:: deepcopy_recorder(recorder_to_copy, memo)


.. py:class:: SimpleRecorder(target: Callable[[S], T], save_condition: orquestra.opt.api.save_conditions.SaveCondition)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`S`\ , :py:obj:`T`\ ]

   A basic recorder that stores history entries.

   :param target: a target function. Calls to the recorder will be propagated to this
                  function.
   :param save_condition: a function determining whether given call should be saved
                          to the history. See respective protocol for explanation of this parameter.


.. py:class:: SimpleRecorderWithGradient(target: orquestra.opt.api.functions.CallableWithGradient, save_condition: orquestra.opt.api.save_conditions.SaveCondition)

   Bases: :py:obj:`SimpleRecorder`

   A recorder saving history entries that works with callables with gradient.

   Except having `gradient` attribute, this recorder is the same as `SimpleRecorder`.


.. py:class:: ArtifactRecorder(target: orquestra.opt.api.functions.CallableStoringArtifacts[S, T], save_condition: orquestra.opt.api.save_conditions.SaveCondition)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`S`\ , :py:obj:`T`\ ]

   A recorder saving history entries with artifacts.

   Parameters to initializer are the same as for `SimpleRecorder`,
   except the target function should now be capable of storing artifacts.


.. py:class:: ArtifactRecorderWithGradient(target: orquestra.opt.api.functions.CallableWithGradientStoringArtifacts, save_condition: orquestra.opt.api.save_conditions.SaveCondition)

   Bases: :py:obj:`ArtifactRecorder`

   A recorder storing history entries with artifacts supporting callables with
   gradient.


.. py:function:: store_artifact(artifacts) -> orquestra.opt.api.functions.StoreArtifact

   Create a function storing artifacts in given artifacts collection.

   :param artifacts: artifact collection.

   :returns: _store(artifact_name: str, artifact: Any, force: bool = False) -> None:
             This function is intended to be passed to functions that are capable of
             storing artifacts.
   :rtype: A function with signature


.. py:data:: AnyRecorder
   

   

.. py:data:: RecorderFactory
   

   

.. py:data:: AnyHistory
   

   

.. py:function:: recorder(function: orquestra.opt.api.functions.CallableWithGradientStoringArtifacts, save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> ArtifactRecorderWithGradient
              recorder(function: orquestra.opt.api.functions.CallableStoringArtifacts[S, T], save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> ArtifactRecorder[S, T]
              recorder(function: orquestra.opt.api.functions.CallableWithGradient, save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> SimpleRecorderWithGradient
              recorder(function: Callable[[S], T], save_condition: orquestra.opt.api.save_conditions.SaveCondition = always) -> SimpleRecorder[S, T]

   Create a recorder that is suitable for recording calls to given callable.

   :param function: a callable to be recorded.
   :param save_condition: a condition on which the calls will be saved. See
                          `SaveCondition` protocol for explanation of this parameter. By default
                          all calls are saved.

   :returns: A callable object (the recorder) wrapping the `function`.
             The return type depends on the passed callable. See overloads defined
             above to check for available variants. Here is a summary:
             - recorder is always callable
             - if `function` has gradient, so does the recorder. Calls to gradient
               and calls made by gradient are NOT recorded.
             - if `function` has possibility to store artifacts (i.e. accepts
               `store_artifact` argument, then so does the recorder.


