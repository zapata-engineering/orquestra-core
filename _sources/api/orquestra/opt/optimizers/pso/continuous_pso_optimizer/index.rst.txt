:py:mod:`orquestra.opt.optimizers.pso.continuous_pso_optimizer`
===============================================================

.. py:module:: orquestra.opt.optimizers.pso.continuous_pso_optimizer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.opt.optimizers.pso.continuous_pso_optimizer.PSOOptimizer




Attributes
~~~~~~~~~~

.. autoapisummary::

   orquestra.opt.optimizers.pso.continuous_pso_optimizer.Bounds


.. py:data:: Bounds
   

   

.. py:class:: PSOOptimizer(swarm_size: int, bounds: Bounds, inertia: float = 0.88, affinity_towards_best_particle_position: float = 0.6, affinity_towards_best_swarm_position: float = 0.26, patience: Optional[int] = None, delta: float = 1e-10, max_iterations: Optional[int] = None, max_fevals: Optional[int] = None, learning_rate: float = 1.0, velocity_bounds: Optional[Bounds] = None, topology_constructor: Callable[[int], orquestra.opt.optimizers.pso.topologies.SwarmTopology] = StarTopology, seed: Optional[int] = None, recorder: orquestra.opt.history.recorder.RecorderFactory = _recorder)

   Bases: :py:obj:`orquestra.opt.api.Optimizer`

   Interface for implementing different optimizers.

   :param recorder: recorder object which defines how to store the optimization history.

   .. py:method:: get_initial_params(dimensions: int) -> numpy.ndarray

      Uniformly samples the parameter space to initialise the particles in the swarm.


      :param dimensions: Number of dimensions of the problem.

      :returns: (N, dimensions) array, where N is the swarm size.
      :rtype: np.ndarray



