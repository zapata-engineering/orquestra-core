:py:mod:`orquestra.opt.problems.graph`
======================================

.. py:module:: orquestra.opt.problems.graph


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.opt.problems.graph.compare_graphs
   orquestra.opt.problems.graph.generate_graph_node_dict
   orquestra.opt.problems.graph.uniform_sampler
   orquestra.opt.problems.graph.constant_sampler
   orquestra.opt.problems.graph.choice_sampler
   orquestra.opt.problems.graph.normal_sampler
   orquestra.opt.problems.graph.generate_random_graph_erdos_renyi
   orquestra.opt.problems.graph.generate_random_regular_graph
   orquestra.opt.problems.graph.generate_caveman_graph
   orquestra.opt.problems.graph.generate_ladder_graph
   orquestra.opt.problems.graph.generate_barbell_graph



Attributes
~~~~~~~~~~

.. autoapisummary::

   orquestra.opt.problems.graph.T
   orquestra.opt.problems.graph.Sampler


.. py:function:: compare_graphs(graph1: networkx.Graph, graph2: networkx.Graph) -> bool

   Compares two NetworkX graph objects to see if they are identical.
   NOTE: this is *not* solving isomorphism problem.


.. py:function:: generate_graph_node_dict(graph: networkx.Graph) -> dict

   Generates a dictionary containing key:value pairs in the form of
   nx.Graph node : integer index of the node


.. py:data:: T
   

   

.. py:data:: Sampler
   

   

.. py:function:: uniform_sampler(min_value: float = 0.0, max_value: float = 1.0) -> Sampler[float]


.. py:function:: constant_sampler(value: T) -> Sampler[T]


.. py:function:: choice_sampler(choices: Sequence[T]) -> Sampler[T]


.. py:function:: normal_sampler(mu: float = 0.0, sigma: float = 1.0) -> Sampler[float]


.. py:function:: generate_random_graph_erdos_renyi(num_nodes: int, edge_probability: float, weight_sampler: Sampler = constant_sampler(1.0), seed: Optional[int] = None) -> networkx.Graph

   Randomly generate a graph from Erdos-Renyi ensemble.  A graph is constructed by
   connecting nodes randomly.  Each edge is included in the graph with probability p
   independent from every other edge. Equivalently, all graphs with n nodes and M edges
   have equal probability.

   :param num_nodes: Number of nodes in the result graph.
   :param edge_probability: Probability of connecting two nodes.
   :param weight_sampler: Used to sample edge weights. Defaults `static_sampler`,
                          i.e. all edge weights are set to 1.0.
   :param seed: if provided, sets the global seed


.. py:function:: generate_random_regular_graph(num_nodes: int, degree: int, weight_sampler: Sampler = constant_sampler(1.0), seed: Optional[int] = None) -> networkx.Graph

   Randomly generate a d-regular graph.
   A graph is generated by picking uniformly a graph among the set of graphs
   with the desired number of nodes and degree.

   :param num_nodes: Number of nodes in the generated graph.
   :param degree: Degree of each edge.
   :param weight_sampler: Used to sample edge weights. Defaults `static_sampler`,
                          i.e. all edge weights are set to 1.0.
   :param seed: if provided, sets the global seed


.. py:function:: generate_caveman_graph(number_of_cliques: int, size_of_cliques: int, weight_sampler: Sampler = constant_sampler(1.0), seed: Optional[int] = None) -> networkx.Graph


.. py:function:: generate_ladder_graph(length_of_ladder: int, weight_sampler: Sampler = constant_sampler(1.0), seed: Optional[int] = None) -> networkx.Graph


.. py:function:: generate_barbell_graph(number_of_vertices_complete_graph: int, weight_sampler: Sampler = constant_sampler(1.0), seed: Optional[int] = None) -> networkx.Graph


