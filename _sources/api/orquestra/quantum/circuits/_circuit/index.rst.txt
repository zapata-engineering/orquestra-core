:orphan:

:py:mod:`orquestra.quantum.circuits._circuit`
=============================================

.. py:module:: orquestra.quantum.circuits._circuit


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.quantum.circuits._circuit.Circuit



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.quantum.circuits._circuit.split_circuit



.. py:class:: Circuit(operations: Optional[Iterable[orquestra.quantum.circuits._operations.Operation]] = None, n_qubits: Optional[int] = None)

   orquestra representation of a quantum circuit.

   See `help(orquestra.quantum.circuits)` for usage guide.

   .. py:method:: operations()
      :property:

      Sequence of quantum gates to apply to qubits in this circuit.


   .. py:method:: n_qubits() -> int
      :property:

      Number of qubits in this circuit.
      Not every qubit has to be used by a gate.


   .. py:method:: free_symbols() -> List[sympy.Symbol]
      :property:

      Set of all the sympy symbols used as params of gates in the circuit.
      The output list is sorted based on the order of appearance
      in `self._operations`.


   .. py:method:: collect_custom_gate_definitions() -> Iterable[orquestra.quantum.circuits._gates.CustomGateDefinition]


   .. py:method:: to_unitary() -> Union[numpy.ndarray, sympy.Matrix]

      Create a unitary matrix describing Circuit's action.

      For performance reasons, this method will construct numpy matrix if circuit does
      not have free parameters, and a sympy matrix otherwise.


   .. py:method:: bind(symbols_map: Dict[sympy.Symbol, Any])

      Create a copy of the current circuit with the parameters of each gate bound
      to the values provided in the input symbols map.

      :param symbols_map: A map of the symbols/gate parameters to new values


   .. py:method:: inverse() -> Circuit

      Create a circuit that, when applied to the current circuit, will
      produce the identity circuit.



.. py:function:: split_circuit(circuit: Circuit, predicate: Callable[[orquestra.quantum.circuits._operations.Operation], bool]) -> Iterable[Tuple[bool, Circuit]]

   Split circuit into subcircuits for which predicate on all operation is constant.

   :param circuit: a circuit to be split
   :param predicate: function assigning boolean value to each operation, its values
                     are used for grouping operations belonging to the same subcircuits.

   :returns:

             - predicate(operation) == x for every operation in subcircuit.operations
             - for two consecutive tuples (x1, subcircuit1), (x2, subcircuit2)
               x1 != x2 (i.e. consecutive chunks differ in the predicate value),
             - operations in subcircuits follow the same order as in original circuit
             - all subcircuits have the same number of qubits equal to `circuit.n_qubits`.
   :rtype: An iterable of tuples of the form (x, subcircuit) s.t.


