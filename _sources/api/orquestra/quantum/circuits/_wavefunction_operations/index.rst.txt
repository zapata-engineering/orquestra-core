:orphan:

:py:mod:`orquestra.quantum.circuits._wavefunction_operations`
=============================================================

.. py:module:: orquestra.quantum.circuits._wavefunction_operations


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.quantum.circuits._wavefunction_operations.MultiPhaseOperation




.. py:class:: MultiPhaseOperation

   Operation applying distinct phase to each wavefunction component.

   MultiPhaseOperation with parameters theta_1, theta_2, .... theta_2^N,
   transforms a N qubit wavefunction (psi_1, psi_2, ..., psi_2^N)
   into (exp(i theta_1)psi_1, exp(i theta_2) psi_2, ..., exp(i theta_2^N) psi_2^N).

   .. py:attribute:: params
      :annotation: :Tuple[orquestra.quantum.circuits._operations.Parameter, Ellipsis]

      

   .. py:method:: qubit_indices() -> Tuple[int, Ellipsis]
      :property:


   .. py:method:: bind(symbols_map) -> MultiPhaseOperation


   .. py:method:: replace_params(new_params: Tuple[orquestra.quantum.circuits._operations.Parameter, Ellipsis]) -> MultiPhaseOperation


   .. py:method:: apply(amplitude_vector: orquestra.quantum.typing.ParameterizedVector) -> orquestra.quantum.typing.ParameterizedVector


   .. py:method:: free_symbols() -> Iterable[sympy.Symbol]
      :property:

      Unbound symbols in the gate matrix.

      Examples:

      - an `H` gate has no free symbols
      - a `RX(np.pi)` gate has no free symbols
      - a `RX(sympy.Symbol("theta"))` gate has a single free symbol `theta`
      - a `RX(sympy.sympify("theta * alpha"))` gate has two free symbols, `alpha` and
          `theta`
      - a `RX(sympy.sympify("theta * alpha")).bind({sympy.Symbol("theta"): 0.42})`
          gate has one free symbol, `alpha`



