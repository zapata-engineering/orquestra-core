:py:mod:`orquestra.quantum.distributions.target_thermal_states`
===============================================================

.. py:module:: orquestra.quantum.distributions.target_thermal_states


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.quantum.distributions.target_thermal_states.convert_integer_to_ising_bitstring
   orquestra.quantum.distributions.target_thermal_states.convert_ising_bitstring_to_integer
   orquestra.quantum.distributions.target_thermal_states.get_thermal_target_measurement_outcome_distribution
   orquestra.quantum.distributions.target_thermal_states.get_thermal_sampled_distribution
   orquestra.quantum.distributions.target_thermal_states.get_cardinality_distribution



.. py:function:: convert_integer_to_ising_bitstring(number: int, length: int) -> List[int]

   Converts an integer into a +/-1s bitstring (also called Ising bitstring).

   :param number: positive number to be converted into its corresponding
                  Ising bitstring representation
   :param length: length of the Ising bitstring (i.e. positive number of spins
                  in the Ising system)

   :returns: Ising bitstring representation (1D array of +/-1).


.. py:function:: convert_ising_bitstring_to_integer(ising_bitstring: List[int]) -> int

   Converts a +/-1s bitstring (also called Ising bitstring) into an integer.
   :param ising_bitstring: 1D array of +/-1.

   :returns: Integer number representation of the Ising bitstring.


.. py:function:: get_thermal_target_measurement_outcome_distribution(n_spins: int, temperature: float, hamiltonian_parameters: Tuple[numpy.ndarray, numpy.ndarray]) -> orquestra.quantum.distributions.MeasurementOutcomeDistribution

   Generates thermal states target distribution, saved in a dict where keys are
   bitstrings and values are corresponding probabilities according to the Boltzmann
   distribution formula.

   :param n_spins: positive number of spins in the Ising system
   :param temperature: temperature factor in the boltzman distribution
   :param hamiltonian_parameters: values of hamiltonian parameters, namely external
                                  fields and two body couplings.

   :returns: Thermal target distribution.
             Number of positive spins in the spin state.


.. py:function:: get_thermal_sampled_distribution(n_samples: int, n_spins: int, temperature: float, hamiltonian_parameters: Tuple[numpy.ndarray, numpy.ndarray]) -> orquestra.quantum.distributions.MeasurementOutcomeDistribution

   Generates thermal states sample distribution
   :param n_samples: the number of samples from the original distribution
   :param n_spins: number of spins in the Ising system
   :param temperature: temperature factor in the Boltzmann distribution

   :returns:

             keys are binary string representations and values
              are corresponding probabilities.
   :rtype: histogram_samples


.. py:function:: get_cardinality_distribution(n_samples: int, n_spins: int, sampled_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution) -> List[int]

   Generates a list with all the occurrences associated to different cardinalities
       in a sampled distribution.

   :param n_samples: the number of samples used to build the sampled distribution
                     (used for normalization purposes)
   :param n_spins: positive number of spins in the Ising system
   :param sampled_distribution: measurement outcome distribution built of samples drawn
                                for a target distribution

   :returns: a list with the cardinalities of all the sampled bitstrings.
   :rtype: cardinality_list


