:py:mod:`orquestra.quantum.runners`
===================================

.. py:module:: orquestra.quantum.runners


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   symbolic_simulator/index.rst
   trackers/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.quantum.runners.SymbolicSimulator
   orquestra.quantum.runners.MeasurementTrackingBackend




.. py:class:: SymbolicSimulator(*, seed: Optional[int] = None)

   Bases: :py:obj:`orquestra.quantum.api.wavefunction_simulator.BaseWavefunctionSimulator`

   A simulator computing wavefunction by consecutive gate matrix multiplication.

   :param seed: the seed of the sampler

   .. py:method:: is_natively_supported(operation: orquestra.quantum.circuits.Operation) -> bool

      Determine if given operation is natively supported by this simulator.

      By default, operation is natively supported iff it is a GateOperation.
      However, this doesn't have to be true for every simulator.
      If the set of natively supported operations is different for
      some simulator, this method should be changed accordingly.

      :param operation: operation to be checked.

      :returns: True if `operation` is natively supported and False otherwise.



.. py:class:: MeasurementTrackingBackend(inner_backend: orquestra.quantum.api.circuit_runner.CircuitRunner, raw_data_file_name: str, record_bitstrings: Optional[bool] = False)

   Bases: :py:obj:`orquestra.quantum.api.circuit_runner.BaseCircuitRunner`

   A wrapper class for a runner that tracks all measurements. The measurements
   are stored in the raw_circuit_data variable as a list of measurement objects.

   .. py:method:: run_batch_and_measure(circuits: Sequence[orquestra.quantum.circuits.Circuit], n_samples: Union[int, Sequence[int]]) -> List[orquestra.quantum.measurements.Measurements]

      Run a set of circuits and measure a certain number of bitstrings.

      :param circuits: The circuits to execute.
      :param n_samples: The number of samples to collect for each circuit.


   .. py:method:: record_raw_measurement_data(circuit: orquestra.quantum.circuits.Circuit, measurement: orquestra.quantum.measurements.Measurements) -> None

      Append data from a measurement to self.raw_data.

      :param circuit: Implemented circuit.
      :param measurement: Implemented measurement.


   .. py:method:: get_measurement_outcome_distribution(circuit: orquestra.quantum.circuits.Circuit, n_samples: Optional[int]) -> orquestra.quantum.distributions.MeasurementOutcomeDistribution

      Calculates a measurement outcome distribution.

      :param circuit: quantum circuit to be executed.

      :returns: Probability distribution of getting specific bistrings.


   .. py:method:: save_raw_data() -> None



