:py:mod:`orquestra.vqa.algorithms.qcbm`
=======================================

.. py:module:: orquestra.vqa.algorithms.qcbm


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.vqa.algorithms.qcbm.QCBM




.. py:class:: QCBM(target_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution, n_layers: int, optimizer: orquestra.opt.api.Optimizer, estimation_method: orquestra.quantum.api.estimation.EstimateExpectationValues, n_shots: Optional[int] = None)

   .. py:method:: default(target_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution, n_layers: int, use_exact_expectation_values: bool = True, n_shots: Optional[int] = None) -> QCBM
      :classmethod:

      Creates a QCBM object with some default settings:

      - optimizer: L-BFGS-B optimizer (scipy implementation)
      - estimation method: either using exact expectation values
          (only for simulation) or standard method of calculating expectation
          values through averaging the results of measurements.
      - topology: topology for ansatz is set to 'all'

      These can be later replaced using one of the `replace_*` methods.

      :param target_distribution: bitstring distribution which QCBM aims to learn
      :param n_layers: Number of layers for the ansatz.
      :param use_exact_expectation_values: A flag indicating whether to use exact
                                           calculation of the expectation values. This is possible only when
                                           running on a simulator. Defaults to True.
      :param n_shots: If non-exact method for calculating expectation values is used,
                      this argument specifies number of shots per expectation value.

      :raises ValueError: if wrong combination of "use_exact_expectation_values" and
          "n_shots" is provided.


   .. py:method:: replace_n_layers(n_layers: int) -> QCBM

      Creates a new QCBM object with a provided number of layers.

      :param n_layers: new number of layers to be used.


   .. py:method:: replace_optimizer(optimizer: orquestra.opt.api.Optimizer) -> QCBM

      Creates a new QCBM object with a provided optimizer.

      :param optimizer: new optimizer to be used.


   .. py:method:: replace_estimation_method(estimation_method: orquestra.quantum.api.estimation.EstimateExpectationValues, n_shots: Optional[int]) -> QCBM

      Creates a new QCBM object with a provided estimation method.

      It requires providing both new estimation method and number of shots.

      :param estimation_method: new estimation method to be used.
      :param n_shots: number of shots for the new estimation method.


   .. py:method:: find_optimal_params(runner: orquestra.quantum.api.circuit_runner.CircuitRunner, initial_params: Optional[numpy.ndarray] = None) -> scipy.optimize.OptimizeResult

      Optimizes the paramaters of QCBM ansatz using provided runner.

      :param runner: runner used for running quantum circuits.
      :param initial_params: Initial parameters for the optimizer. If None provided,
                             will create random parameters from [0, pi]. Defaults to None.


   .. py:method:: get_cost_function(runner: orquestra.quantum.api.circuit_runner.CircuitRunner) -> orquestra.opt.api.CostFunction

      Returns cost function associated with given QCBM instance.

      :param runner: runner used for running quantum circuits.


   .. py:method:: get_circuit(params: numpy.ndarray) -> orquestra.quantum.circuits.Circuit

      Returns a circuit associated with give QCBM instance.

      :param params: ansatz parameters.


   .. py:method:: n_qubits()
      :property:


   .. py:method:: ansatz()
      :property:



