:py:mod:`orquestra.vqa.algorithms.vqe`
======================================

.. py:module:: orquestra.vqa.algorithms.vqe


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.vqa.algorithms.vqe.VQE




.. py:class:: VQE(hamiltonian: orquestra.quantum.operators.PauliRepresentation, optimizer: orquestra.opt.api.Optimizer, ansatz: orquestra.vqa.api.ansatz.Ansatz, estimation_method: orquestra.quantum.api.estimation.EstimateExpectationValues, grouping: Optional[orquestra.quantum.api.estimation.EstimationPreprocessor], shots_allocation: orquestra.quantum.api.estimation.EstimationPreprocessor, n_shots: Optional[int] = None)

   .. py:method:: default(hamiltonian: orquestra.quantum.operators.PauliRepresentation, ansatz: orquestra.vqa.api.ansatz.Ansatz, use_exact_expectation_values: bool = True, grouping: Optional[str] = None, shots_allocation: str = 'proportional', n_shots: Optional[int] = None) -> VQE
      :classmethod:

      Creates a VQE object with some default settings:

          - optimizer: L-BFGS-B optimizer (scipy implementation)
          - estimation method: either using exact expectation values
              (only for simulation) or standard method of calculating expectation
              values through averaging the results of measurements.
          - grouping: The default value is None, therefore everything is co-measurable
          - shots_allocation: proportional to the weights of the Pauli terms

      These can be later replaced using one of the `replace_*` methods.

      :param hamiltonian: Cost Hamiltonian defining the problem.
      :param use_exact_expectation_values: A flag indicating whether to use exact
                                           calculation of the expectation values. This is possible only when
                                           running on a simulator. Defaults to True.
      :param grouping: name of the grouping function provided as a string. It only
      :param accepts "greedy":
      :param "individual" or None as an argument.:
      :param shots_allocation: name of the shots allocation function provided as a
      :param string. It only accepts "proportional" and "individual" as an argument.:
      :param n_shots: Specifies number of shots to be used for a given shots allocation
      :param method. If exact_expectation_values is true:
      :param it should be equal to None.:

      :raises ValueError: if wrong combination of "use_exact_expectation_values" and
          "n_shots" is provided.


   .. py:method:: replace_optimizer(optimizer: orquestra.opt.api.Optimizer) -> VQE

      Creates a new VQE object with a provided optimizer.

      :param optimizer: new optimizer to be used.


   .. py:method:: replace_hamiltonian(hamiltonian: orquestra.quantum.operators.PauliRepresentation) -> VQE

      Creates a new VQE object with a provided hamiltonian

      :param hamiltonioan: new hamiltonian to be used


   .. py:method:: replace_ansatz(ansatz: orquestra.vqa.api.ansatz.Ansatz) -> VQE

      Creates a new VQE object with a provided ansatz.

      :param ansatz: new ansatz to be used.


   .. py:method:: replace_estimation_method(estimation_method: orquestra.quantum.api.estimation.EstimateExpectationValues, n_shots: Optional[int]) -> VQE

      Creates a new VQE object with a provided estimation method.

      It requires providing both new estimation method and number of shots.

      :param estimation_method: new estimation method to be used.
      :param n_shots: number of shots for the new estimation method.


   .. py:method:: replace_grouping(grouping: orquestra.quantum.api.estimation.EstimationPreprocessor) -> VQE

      Creates a new VQE object with a provided grouping method.

      :param grouping: new grouping method to be used.


   .. py:method:: replace_shots_allocation(shots_allocation: orquestra.quantum.api.estimation.EstimationPreprocessor, n_shots: int) -> VQE

      Creates a new VQE object with a provided shots allocation.

      It requires providing both new estimation method and number of shots.

      :param shots_allocation: new estimation method to be used.
      :param n_shots: number of shots for the new estimation method.


   .. py:method:: find_optimal_params(runner: orquestra.quantum.api.circuit_runner.CircuitRunner, initial_params: Optional[numpy.ndarray] = None) -> scipy.optimize.OptimizeResult

      Optimizes the paramaters of VQE ansatz using provided runner.

      :param runner: runner used for running quantum circuits.
      :param initial_params: Initial parameters for the optimizer. If None provided,
                             will create random parameters from [0, pi]. Defaults to None.


   .. py:method:: get_cost_function(runner: orquestra.quantum.api.circuit_runner.CircuitRunner) -> orquestra.opt.api.CostFunction

      Returns cost function associated with given VQE instance.

      :param runner: runner used for running quantum circuits.


   .. py:method:: get_circuit(params: numpy.ndarray) -> orquestra.quantum.circuits.Circuit

      Returns a circuit associated with give VQE instance.

      :param params: ansatz parameters.


   .. py:method:: n_qubits()
      :property:



