:py:mod:`orquestra.vqa.ansatz.qaoa_warm_start`
==============================================

.. py:module:: orquestra.vqa.ansatz.qaoa_warm_start


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   orquestra.vqa.ansatz.qaoa_warm_start.WarmStartQAOAAnsatz



Functions
~~~~~~~~~

.. autoapisummary::

   orquestra.vqa.ansatz.qaoa_warm_start.convert_relaxed_solution_to_angles



.. py:class:: WarmStartQAOAAnsatz(number_of_layers: int, cost_hamiltonian: orquestra.quantum.operators.PauliRepresentation, thetas: numpy.ndarray)

   Bases: :py:obj:`orquestra.vqa.api.ansatz.Ansatz`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: supports_parametrized_circuits
      :annotation: = True

      

   .. py:attribute:: cost_hamiltonian
      

      

   .. py:attribute:: thetas
      

      

   .. py:method:: number_of_qubits()
      :property:

      Returns number of qubits used for the ansatz circuit.


   .. py:method:: number_of_params() -> int
      :property:

      Returns number of parameters in the ansatz.



.. py:function:: convert_relaxed_solution_to_angles(relaxed_solution: numpy.ndarray, epsilon: float = 0.5) -> numpy.ndarray

   Maps solution to a QP problem from values between 0 to 1 to values between 0-2pi.
   It uses method presented in section 2B in https://arxiv.org/abs/2009.10095v3 .

   :param relaxed_solution: relaxed solution.
   :param epsilon: regularization constant.

   :returns: converted values.
   :rtype: np.ndarray


