:py:mod:`quantum.api.backend`
=============================

.. py:module:: quantum.api.backend


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   quantum.api.backend.QuantumBackend
   quantum.api.backend.QuantumSimulator




Attributes
~~~~~~~~~~

.. autoapisummary::

   quantum.api.backend.StateVector


.. py:data:: StateVector
   

   

.. py:class:: QuantumBackend

   Bases: :py:obj:`abc.ABC`

   Interface for implementing different quantum backends.

   .. attribute:: supports_batching

      boolean flag indicating whether given backend
      supports batching circuits.

   .. attribute:: batch_size

      number of circuit runs in a single batch.
      If `supports_batching` is true should be a positive integer.

   .. attribute:: number_of_circuits_run

      number of circuits executed by this backend

   .. attribute:: number_of_jobs_run

      number of jobs executed by this backend. Will be different
      from `number_of_circuits_run` if batches are used.

   .. py:attribute:: supports_batching
      :annotation: :bool = False

      

   .. py:attribute:: batch_size
      :annotation: :Optional[int]

      

   .. py:method:: run_circuit_and_measure(circuit: orquestra.quantum.circuits.Circuit, n_samples: int) -> quantum.measurements.Measurements
      :abstractmethod:

      Method for executing the circuit and measuring the outcome.
      :param circuit: quantum circuit to be executed.
      :param n_samples: The number of samples to collect.


   .. py:method:: run_circuitset_and_measure(circuits: Sequence[orquestra.quantum.circuits.Circuit], n_samples: Sequence[int]) -> List[quantum.measurements.Measurements]

      Run a set of circuits and measure a certain number of bitstrings.

      It may be useful to override this method for backends that support
      batching.

      :param circuits: The circuits to execute.
      :param n_samples: The number of samples to collect for each circuit.


   .. py:method:: get_measurement_outcome_distribution(circuit: orquestra.quantum.circuits.Circuit, n_samples: int) -> quantum.distributions.MeasurementOutcomeDistribution

      Calculates a measurement outcome distribution.

      :param circuit: quantum circuit to be executed.

      :returns: Probability distribution of getting specific bistrings.



.. py:class:: QuantumSimulator(noise_model: Optional[Any] = None, device_connectivity: Optional[orquestra.quantum.circuits.layouts.CircuitConnectivity] = None)

   Bases: :py:obj:`QuantumBackend`

   Simulator capable of computing exact wavefunction.

   Note that in contrast to non-simulator QuantumBackends, simulators
   are capable of simulating operations that are not natively supported
   by libraries/services they wrap. Therefore, simulation of a circuit may
   get broken into several smaller circuits. Each native circuit run
   using the wrapped library or service counts towards number_of_circuits
   run and number_of_jobs_run. However, if simulated circuit comprises only
   natively supported operation AND concrete implementation does not change
   counting methodology, each simulated circuit corresponds to an increase
   of both those numbers by one.

   .. py:method:: is_natively_supported(operation: orquestra.quantum.circuits.Operation) -> bool

      Determine if given operation is natively supported by this Simulator.

      This method can be as a predicate in split_circuit function.


   .. py:method:: get_wavefunction(circuit: orquestra.quantum.circuits.Circuit, initial_state: Optional[StateVector] = None) -> orquestra.quantum.wavefunction.Wavefunction

      Returns a wavefunction representing quantum state produced by a circuit

      :param circuit: quantum circuit to be executed.
      :param initial_state: a state from which the simulation starts.
                            If not provided, the default |0...0> is used.


   .. py:method:: get_exact_expectation_values(circuit: orquestra.quantum.circuits.Circuit, operator: orquestra.quantum.openfermion.SymbolicOperator) -> quantum.measurements.ExpectationValues

      Calculates the expectation values for given operator, based on the exact
      quantum state produced by circuit.

      :param circuit: quantum circuit to be executed.
      :param operator: Operator for which we calculate the expectation value.


   .. py:method:: get_measurement_outcome_distribution(circuit: orquestra.quantum.circuits.Circuit, n_samples: Optional[int] = None) -> quantum.distributions.MeasurementOutcomeDistribution

      Calculates a bitstring distribution.

      :param circuit: quantum circuit to be executed.

      :returns: Probability distribution of getting specific bistrings.



