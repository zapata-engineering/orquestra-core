:py:mod:`quantum.circuits.layouts`
==================================

.. py:module:: quantum.circuits.layouts


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   quantum.circuits.layouts.CircuitLayers
   quantum.circuits.layouts.CircuitConnectivity



Functions
~~~~~~~~~

.. autoapisummary::

   quantum.circuits.layouts.save_circuit_layers
   quantum.circuits.layouts.load_circuit_layers
   quantum.circuits.layouts.save_circuit_ordering
   quantum.circuits.layouts.load_circuit_ordering
   quantum.circuits.layouts.save_circuit_connectivity
   quantum.circuits.layouts.load_circuit_connectivity
   quantum.circuits.layouts.build_circuit_layers_and_connectivity



.. py:class:: CircuitLayers(layers: List[List[Tuple]])

   A class representing a pattern of circuit layers, consisting of lists,
   each list containing the groups of qubits entangled for each multiqubit
   gate in a particular layer.

   .. py:method:: to_dict() -> dict


   .. py:method:: from_dict(data: Dict[str, List[List[Tuple]]])
      :classmethod:



.. py:function:: save_circuit_layers(circuit_layers: CircuitLayers, filename: str) -> None

   Saves a list of circuit layers to a file.
   :param circuit_layers:
   :type circuit_layers: circuit.CircuitLayers
   :param filename: the name of the file
   :type filename: str


.. py:function:: load_circuit_layers(file: TextIO) -> CircuitLayers

   Loads a list of circuit layers from a file.
   :param file: the name of the file, or a file-like object.
   :type file: str or file-like object

   :returns: (circuit.CircuitLayers)


.. py:function:: save_circuit_ordering(ordering, filename)

   Saves a circuit ordering (e.g. mapping from spin-orbitals to qubits) to a file.
   :param ordering:
   :type ordering: list
   :param filename: the name of the file
   :type filename: str


.. py:function:: load_circuit_ordering(file)

   Loads a circuit ordering (e.g. mapping from spin-orbitals to qubits) to a file.
   :param file: the name of the file, or a file-like object.
   :type file: str or file-like object

   :returns: ordering (list)


.. py:class:: CircuitConnectivity(connections)

   Bases: :py:obj:`object`

   A class representing the connectivity of a circuit resulting from qpu
   constraints, consisting of a list of tuples of qubits representing the
   allowed multiqubit gate connections.

   .. py:method:: to_dict()


   .. py:method:: from_dict(data)
      :classmethod:



.. py:function:: save_circuit_connectivity(circuit_connectivity, filename)

   Saves a circuit connectivity to a file.
   :param circuit_connectivity:
   :type circuit_connectivity: orquestra.quantum.circuit.CircuitConnectivity
   :param filename: the name of the file
   :type filename: str


.. py:function:: load_circuit_connectivity(file)

   Loads a circuit connectivity from a file.
   :param file: the name of the file, or a file-like object.
   :type file: str or file-like object

   :returns: (orquestra.quantum.circuit.CircuitConnectivity)


.. py:function:: build_circuit_layers_and_connectivity(x_dimension, y_dimension=None, layer_type='nearest-neighbor')

   Function to generate circuit layers for 1-dimensional and 2-dimensional
   arrays of qubits
   :param x_dimension: number of qubits per row of the array
   :type x_dimension: int
   :param y_dimension: number of qubits per column of the array
   :type y_dimension: int
   :param layer_type: string designating type of layer to be created
   :type layer_type: str

   :returns:

             (orquestra.quantum.circuit.CircuitConnectivity,
                 orquestra.quantum.circuit.CircuitLayers)


