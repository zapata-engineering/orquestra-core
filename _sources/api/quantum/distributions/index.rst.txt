:py:mod:`quantum.distributions`
===============================

.. py:module:: quantum.distributions


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   BAS_dataset/index.rst
   clipped_negative_log_likelihood/index.rst
   jensen_shannon_divergence/index.rst
   mmd/index.rst
   target_thermal_states/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   quantum.distributions.MeasurementOutcomeDistribution



Functions
~~~~~~~~~

.. autoapisummary::

   quantum.distributions.change_tuple_dict_keys_to_comma_separated_integers
   quantum.distributions.create_bitstring_distribution_from_probability_distribution
   quantum.distributions.evaluate_distribution_distance
   quantum.distributions.is_measurement_outcome_distribution
   quantum.distributions.is_normalized
   quantum.distributions.load_measurement_outcome_distribution
   quantum.distributions.load_measurement_outcome_distributions
   quantum.distributions.normalize_measurement_outcome_distribution
   quantum.distributions.preprocess_distibution_dict
   quantum.distributions.save_measurement_outcome_distribution
   quantum.distributions.save_measurement_outcome_distributions
   quantum.distributions.compute_clipped_negative_log_likelihood
   quantum.distributions.compute_jensen_shannon_divergence
   quantum.distributions.compute_mmd
   quantum.distributions.compute_multi_rbf_kernel
   quantum.distributions.compute_rbf_kernel



.. py:class:: MeasurementOutcomeDistribution(input_dict: Dict[Union[str, Tuple[int, Ellipsis]], float], normalize: bool = True)

   A probability distribution defined on discrete non-negative integer
   sequences. Normalization is performed by default, unless otherwise specified.

   :param input_dict: dictionary representing the probability distribution where
                      the keys are non-negative integer sequences represented as tuples
                      and the values are non-negative floats.
   :param normalize: boolean variable specifying whether the input_dict gets
                     normalized or not.

   .. attribute:: distribution_dict

      dictionary representing the probability
      distribution where the keys are non-negative integer sequences
      represented as tuples and the values are non-negative floats.

   .. py:method:: get_number_of_subsystems(self) -> int

      Compute how many subsystems the measurement outcome is composed of.
      This corresponds to the number of qubits in a digital quantum computer.

      :returns:

                number of subsystems in the measurement outcome
                    (i.e. non-negative integer sequence length).
      :rtype: int


   .. py:method:: subdistribution(self, active_qubits: List[int]) -> MeasurementOutcomeDistribution

      Returns a subdistribution, which represents measurements outcome including only
      the specified qubits.

      :returns:

                indices of the qubits that should be included in
                    the subdistribution. Order of the indices will be preserved in
                    the order of the result bitstrings.
      :rtype: active_qubits



.. py:function:: change_tuple_dict_keys_to_comma_separated_integers(dict)


.. py:function:: create_bitstring_distribution_from_probability_distribution(prob_distribution: numpy.ndarray) -> MeasurementOutcomeDistribution

   Create a well defined bitstring distribution starting from a probability
   distribution.

   :param probability distribution: The probabilities of the various states in the
                                    wavefunction.

   :returns:

             The MeasurementOutcomeDistribution object corresponding to
                 the input measurements.


.. py:function:: evaluate_distribution_distance(target_distribution: MeasurementOutcomeDistribution, measured_distribution: MeasurementOutcomeDistribution, distance_measure_function: Callable, **kwargs) -> float

   Evaluate the distance between two measurement outcome distributions - the target
   distribution and the one predicted (measured) by your model - based on the given
   distance measure.

   :param target_distribution: The target measurement outcome probability distribution
   :param measured_distribution: The measured measurement outcome probability
                                 distribution
   :param distance_measure_function:
                                     function used to calculate the distance measure
                                      Currently implemented: clipped negative log-likelihood, maximum mean
                                     discrepancy (MMD).
   :param Additional distance measure parameters can be passed as key word arguments.:

   :returns: The value of the distance measure.


.. py:function:: is_measurement_outcome_distribution(input_dict: Dict[Union[str, Tuple[int, Ellipsis]], float]) -> bool

   Check if the input dictionary is a non-negative integer sequence distribution, i.e.:
           - keys are same-length tuples of non-negative integers,
           - values are non negative.

   :param input_dict: dictionary representing the probability distribution where
                      the keys are non-negative integer sequences represented as tuples
                      and the values are floats.

   :returns:

             Boolean variable indicating whether the non-negative integer sequence
                 distribution is well defined or not.


.. py:function:: is_normalized(input_dict: Dict[Union[str, Tuple[int, Ellipsis]], float]) -> bool

   Check if a measurement outcome distribution is normalized.

   :param input_dict: dictionary representing the probability distribution
                      where the keys are non-negative integer sequences represented
                      as tuples and the values are floats.

   :returns:

             Boolean value indicating whether the measurement outcome distribution
                 is normalized.


.. py:function:: load_measurement_outcome_distribution(file: str) -> MeasurementOutcomeDistribution

   Load a measurement outcome distribution from a json file.

   :param file: the name of the file
   :type file: str

   :returns: a python object loaded from the measurement_outcome_distribution
   :rtype: object


.. py:function:: load_measurement_outcome_distributions(file: str) -> List[MeasurementOutcomeDistribution]

   Load a list of measurement_outcome_distribution from a json file.

   :param file: the name of the file.

   :returns:

             A list of measurement outcome distributions loaded
              from the measurement_outcome_distribution


.. py:function:: normalize_measurement_outcome_distribution(measurement_outcome_distribution: Dict[Union[str, Tuple[int, Ellipsis]], float]) -> Dict

   Normalize a measurement outcome distribution.

   :param measurement_outcome_distribution: dictionary representing the probability
                                            distribution where the keys are non-negative integer sequences represented
                                            as tuples and the values are floats.

   :returns:

             Dictionary representing the normalized probability distribution where the keys
                 are non-negative integer sequences represented as tuples and the values
                 are floats.


.. py:function:: preprocess_distibution_dict(input_dict: Dict[Union[str, Tuple[int, Ellipsis]], float]) -> Dict[Union[str, Tuple[int, Ellipsis]], float]


.. py:function:: save_measurement_outcome_distribution(distribution: MeasurementOutcomeDistribution, filename: quantum.typing.AnyPath) -> None

   Save a measurement outcome distribution to a file.

   :param distribution: the measurement outcome
   :type distribution: MeasurementOutcomeDistribution
   :param distribution file: the name of the file,
                             or a file-like object
   :type distribution file: str or file-like object


.. py:function:: save_measurement_outcome_distributions(measurement_outcome_distribution: List[MeasurementOutcomeDistribution], filename: str) -> None

   Save a set of measurement outcome distributions to a file.

   :param measurement_outcome_distribution: a list of distributions to be saved
   :type measurement_outcome_distribution: list
   :param file: the name of the file
   :type file: str


.. py:function:: compute_clipped_negative_log_likelihood(target_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution, measured_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution, distance_measure_parameters: Dict) -> float

   Compute the value of the clipped negative log likelihood between a target
    distribution and a measured distribution.
   See Equation (4) in https://advances.sciencemag.org/content/5/10/eaaw9918?rss=1

   :param target_distribution: The target probability distribution.
   :param measured_distribution: The measured probability distribution.
   :param distance_measure_parameters:
                                       epsilon (float): The small parameter needed to regularize log computation
                                           when argument is zero. The default value is 1e-9.

   :returns: The value of the clipped negative log likelihood


.. py:function:: compute_jensen_shannon_divergence(target_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution, measured_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution, distance_measure_parameters: Dict) -> float

   Computes the symmetrized version of the clipped negative log likelihood between a
    target distribution and a measured distribution.
   See Equation (4) in https://advances.sciencemag.org/content/5/10/eaaw9918?rss=1

   :param target_distribution: The target probability distribution.
   :param measured_distribution: The measured probability distribution.
   :param distance_measure_parameters: epsilon (float): The small parameter needed to regularize log computation
                                       when argument is zero. The default value is 1e-9.

   :returns: The value of the symmetrized version
   :rtype: float


.. py:function:: compute_mmd(target_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution, measured_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution, distance_measure_parameters: Dict) -> float

   Compute the squared Maximum Mean Discrepancy (MMD) distance measure between
   between a target distribution and a measured distribution.
   Reference: arXiv.1804.04168.

       Args:
           target_distribution: The target probability distribution.
           measured_distribution: The measured probability distribution.

           distance_measure_parameters:
               sigma (float/np.array): the bandwidth parameter used to compute the
                   single/multi gaussian kernel. The default value is 1.0.

       Returns:
           The value of the maximum mean discrepancy.


.. py:function:: compute_multi_rbf_kernel(x_i: numpy.ndarray, y_j: numpy.ndarray, sigmas: Sequence[float]) -> numpy.ndarray

   Compute the multi-gaussian (RBF) kernel matrix K, with

   K_ij = 1/N * Sum_n [exp(-gamma_n |x_i - y_j|^2)]

   with n = 1,...,N and gamma = 1/(2*sigma).

   :param x_i: Samples A (integers).
   :param y_j: Samples B (integers).
   :param sigmas: The list of bandwidths of the multi-gaussian kernel.

   :returns: The gaussian kernel matrix.
   :rtype: np.ndarray


.. py:function:: compute_rbf_kernel(x_i: numpy.ndarray, y_j: numpy.ndarray, sigma: float) -> numpy.ndarray

   Compute the gaussian (RBF) kernel matrix K, with K_ij = exp(-gamma |x_i - y_j|^2)
   and gamma = 1/(2*sigma).

   :param x_i: Samples A (integers).
   :param y_j: Samples B (integers).
   :param sigma: The bandwidth of the gaussian kernel.

   :returns: The gaussian kernel matrix.
   :rtype: np.ndarray


