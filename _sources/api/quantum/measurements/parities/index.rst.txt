:py:mod:`quantum.measurements.parities`
=======================================

.. py:module:: quantum.measurements.parities


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   quantum.measurements.parities.Parities



Functions
~~~~~~~~~

.. autoapisummary::

   quantum.measurements.parities.save_parities
   quantum.measurements.parities.load_parities
   quantum.measurements.parities.check_parity
   quantum.measurements.parities.check_parity_of_vector
   quantum.measurements.parities.get_parities_from_measurements



.. py:class:: Parities(values: numpy.ndarray, correlations: Optional[List[numpy.ndarray]] = None)

   A class representing counts of parities for Pauli terms.

   :param values: Number of observations of parities. See Attributes.
   :type values: np.array
   :param correlations: Number of observations of pairwise products of terms.
                        See Attributes.
   :type correlations: list

   .. attribute:: values

      an array of dimension N x 2 indicating how many times
      each Pauli term was observed with even and odd parity, where N is the
      number of Pauli terms. Here values[i][0] and values[i][1] correspond
      to the number of samples with even and odd parities for term P_i,
      respectively.

      :type: np.array

   .. attribute:: correlations

      a list of 3-dimensional numpy arrays indicating how
      many times each product of Pauli terms was observed with even and odd
      parity. Here correlations[i][j][k][0] and correlations[i][j][k][1]
      correspond to the number of samples with even and odd parities term P_j P_k
      in frame i, respectively.

      :type: list

   .. py:method:: to_dict() -> dict


   .. py:method:: from_dict(data: dict)
      :classmethod:



.. py:function:: save_parities(parities: Parities, filename: orquestra.quantum.typing.AnyPath) -> None

   Save parities to a file.

   :param parities: the parities
   :type parities: orquestra.quantum.measurement.Parities
   :param file: the name of the file, or a file-like object
   :type file: str or file-like object


.. py:function:: load_parities(file: orquestra.quantum.typing.LoadSource) -> Parities

   Load parities from a file.

   :param file: the name of the file, or a file-like object.
   :type file: str or file-like object

   :returns: the parities
   :rtype: orquestra.quantum.measurement.Parities


.. py:function:: check_parity(bitstring: Union[str, Sequence[int]], marked_qubits: Iterable[int]) -> bool

   Determine if the marked qubits have even parity for the given bitstring.

   :param bitstring: The bitstring, either as a tuple or little endian string.
   :param marked_qubits: The qubits whose parity is to be determined.

   :returns:

             True if an even number of the marked qubits are in the 1 state, False
                 otherwise.


.. py:function:: check_parity_of_vector(bitstrings_vector: numpy.ndarray, marked_qubits: Iterable[int]) -> numpy.ndarray

   Determine if the marked qubits have even parity for each bitstring in the given
       vector.
       NOTE: This performs the same functionality as `check_parity` but is much
       faster as it uses vectorization to find the parity of multiple bitstrings
       at once.

   :param bitstring: A 2d array of bitstrings whose size is number of bistrings * number
                     of qubits
   :param marked_qubits: The qubits whose parity is to be determined.

   :returns: A 1d array with size equal to number of bitstrings. Each entry is 1 if an even
             number of the marked qubits of the corresponding bitstring are in the 1 state
             and 0 if otherwise.


.. py:function:: get_parities_from_measurements(measurements: List[Tuple[int]], ising_operator: quantum.operators.PauliRepresentation) -> Parities

   Get expectation values from bitstrings.

   :param measurements: the measured bitstrings
   :type measurements: list
   :param ising_operator: the operator

   :returns: parities of each term in the operator
   :rtype: orquestra.quantum.measurement.Parities


