:orphan:

:py:mod:`quantum.operators._utils`
==================================

.. py:module:: quantum.operators._utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   quantum.operators._utils.get_pauliop_from_matrix
   quantum.operators._utils.get_pauliop_from_coeffs_and_labels
   quantum.operators._utils.generate_random_pauliop
   quantum.operators._utils.evaluate_operator
   quantum.operators._utils.evaluate_operator_list
   quantum.operators._utils.reverse_qubit_order
   quantum.operators._utils.get_expectation_value



.. py:function:: get_pauliop_from_matrix(operator: List[List]) -> quantum.operators._pauli_operators.PauliSum

   Expands a 2^n by 2^n matrix into n-qubit Pauli basis. The runtime of
   this function is O(2^2n).

   :param operator: a list of lists (rows) representing a 2^n by 2^n
                    matrix.

   :returns: A PauliSum instance corresponding to the expansion of
             the input operator as a sum of Pauli strings:

             O = 2^-n \sum_P tr(O*P) P


.. py:function:: get_pauliop_from_coeffs_and_labels(coeffs: List[float], labels: List[List[int]]) -> quantum.operators._pauli_operators.PauliSum

   Generates a PauliSum based on a coefficient vector and
   a label matrix.

   :param coeffs: a list of floats representing the coefficients
                  for the terms in the Hamiltonian
   :param labels: a list of lists (a matrix) where each list
                  is a vector of integers representing the Pauli
                  string. See pauliutil.py for details.

   .. rubric:: Example

   The Hamiltonian H = 0.1 X1 X2 - 0.4 Y1 Y2 Z3 Z4 can be
   initiated by calling

   H = get_pauliop_from_coeffs_and_labels([0.1, -0.4],  # coefficients
       [[1 1 0 0],  # label matrix
       [2 2 3 3]])


.. py:function:: generate_random_pauliop(nqubits: int, nterms: int, nlocality: int, max_coeff: float, fixed_coeff: bool = False) -> quantum.operators._pauli_operators.PauliSum

   Generates a Hamiltonian with term coefficients uniformly distributed
   in [-max_coeff, max_coeff].

   :param nqubits   - number of qubits:
   :param nterms    - number of terms in the Hamiltonian:
   :param nlocality - locality of the Hamiltonian:
   :param max_coeff - bound for generating the term coefficients:
   :param fixed_coeff: max_coeff as coefficient.
   :type fixed_coeff: bool

   :returns: A PauliSum with the appropriate coefficient vector
             and label matrix.


.. py:function:: evaluate_operator(operator: quantum.operators._pauli_operators.PauliRepresentation, expectation_values) -> quantum.utils.ValueEstimate

   Evaluate the expectation value of a qubit operator using expectation values for
   the terms.

   :param operator: the operator
   :param expectation_values: the expectation values

   :returns: stores the value of the expectation and its precision
   :rtype: value_estimate


.. py:function:: evaluate_operator_list(operator_list: List[quantum.operators._pauli_operators.PauliRepresentation], expectation_values) -> quantum.utils.ValueEstimate

   Evaluate the expectation value of an operator list using expectation values for
   the terms. The expectation values should be in the order given by the qubit operator
   list, and the value returned is the sum of all terms in the qubit operator list.

   :param operator_list: the operator list
   :param expectation_values: the expectation values

   :returns: stores the value of the expectation and its precision
   :rtype: value_estimate


.. py:function:: reverse_qubit_order(qubit_operator: quantum.operators._pauli_operators.PauliRepresentation, n_qubits: Optional[int] = None)

   Reverse the order of qubit indices in a qubit operator.

   :param qubit_operator: the operator to be reversed
   :param n_qubits: total number of qubits. Needs to be provided when
                    the size of the system of interest is greater than the size of qubit
                    operator (optional)
   :type n_qubits: int

   :returns: the reversed operator
   :rtype: reversed_op


.. py:function:: get_expectation_value(qubit_op: quantum.operators._pauli_operators.PauliRepresentation, wavefunction: quantum.wavefunction.Wavefunction, reverse_operator: bool = False) -> complex

   Get the expectation value of a qubit operator with respect to a wavefunction.
   :param qubit_op: the operator
   :param wavefunction: the wavefunction
   :param reverse_operator: whether to reverse order of qubit operator
                            before computing expectation value. This should be True if the convention
                            of the basis states used for the wavefunction is the opposite of the one in
                            the qubit operator. This is the case when the wavefunction uses
                            Rigetti convention (https://arxiv.org/abs/1711.02086) of ordering qubits.

   :returns: the expectation value


