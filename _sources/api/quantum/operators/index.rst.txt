:py:mod:`quantum.operators`
===========================

.. py:module:: quantum.operators

.. autoapi-nested-parse::

   This module contains functions and classes for pauli representations of operators.



Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   quantum.operators.PauliSum
   quantum.operators.PauliTerm



Functions
~~~~~~~~~

.. autoapisummary::

   quantum.operators.convert_dict_to_op
   quantum.operators.convert_op_to_dict
   quantum.operators.get_pauli_strings
   quantum.operators.load_operator
   quantum.operators.load_operator_set
   quantum.operators.save_operator
   quantum.operators.save_operator_set
   quantum.operators.expectation
   quantum.operators.get_sparse_operator
   quantum.operators.hermitian_conjugated
   quantum.operators.is_hermitian
   quantum.operators.get_expectation_value
   quantum.operators.reverse_qubit_order



Attributes
~~~~~~~~~~

.. autoapisummary::

   quantum.operators.EQ_TOLERANCE
   quantum.operators.PauliRepresentation


.. py:function:: convert_dict_to_op(dictionary: dict) -> quantum.operators._pauli_operators.PauliSum

   Get a PauliSum from a dictionary.
   :param dictionary: the dictionary representation

   :returns: the operator
   :rtype: op


.. py:function:: convert_op_to_dict(op: quantum.operators._pauli_operators.PauliRepresentation) -> Dict[str, Any]

   Convert a PauliTerm or PauliSum to a dictionary.
   :param op: the operator

   :returns: the dictionary representation
   :rtype: dictionary


.. py:function:: get_pauli_strings(operator: quantum.operators._pauli_operators.PauliRepresentation) -> List[str]

   Convert a operator into a list of Pauli strings.

   :param operator: an operator to be converted

   :returns: list of Pauli strings
   :rtype: pauli_strings


.. py:function:: load_operator(file: orquestra.quantum.typing.LoadSource) -> quantum.operators._pauli_operators.PauliSum

   Load an operator object from a file.
   :param file: the name of the file, or a file-like object.

   :returns: the operator.
   :rtype: op


.. py:function:: load_operator_set(file: orquestra.quantum.typing.LoadSource) -> List[quantum.operators._pauli_operators.PauliSum]

   Load a set of qubit operators from a file.

   :param file: the name of the file, or a file-like object.

   :returns: a list of QubitOperator objects
   :rtype: operator_set


.. py:function:: save_operator(operator: quantum.operators._pauli_operators.PauliRepresentation, filename: orquestra.quantum.typing.AnyPath) -> None

   Save a qubit operator to file.
   :param operator: the operator to be saved
   :param filename: the name of the file


.. py:function:: save_operator_set(operator_set: List[quantum.operators._pauli_operators.PauliSum], filename: orquestra.quantum.typing.AnyPath) -> None

   Save a set of qubit operators to a file.

   :param operator_set: a list of QubitOperator to be saved
   :param file: the name of the file


.. py:data:: EQ_TOLERANCE
   :annotation: = 1e-08

   

.. py:function:: expectation(operator, state)

   Compute the expectation value of an operator with a state.

   :param operator: The operator whose expectation value is desired.
   :type operator: scipy.sparse.spmatrix or scipy.sparse.linalg.LinearOperator
   :param state: A numpy array
                 representing a pure state or a sparse matrix representing a density
                 matrix. If `operator` is a LinearOperator, then this must be a
                 numpy array.
   :type state: numpy.ndarray or scipy.sparse.spmatrix

   :returns: A complex number giving the expectation value.

   :raises ValueError: Input state has invalid format.


.. py:function:: get_sparse_operator(operator: quantum.operators._pauli_operators.PauliRepresentation, n_qubits: Optional[int] = None)

   Initialize a Scipy sparse matrix from a PauliTerm or PauliSum.

   :param operator: the pauli representation to convert to matrix representation.
   :param n_qubits: Number of qubits.
   :type n_qubits: int

   :returns: The corresponding Scipy sparse matrix.


.. py:function:: hermitian_conjugated(operator)

   Return Hermitian conjugate of operator.


.. py:function:: is_hermitian(operator)

   Test if operator is Hermitian.


.. py:data:: PauliRepresentation
   

   

.. py:class:: PauliSum(terms: Union[str, Sequence[PauliTerm]] = None)

   .. py:method:: qubits() -> Set[int]
      :property:


   .. py:method:: is_ising() -> bool
      :property:

      Returns whether the full operator represents an Ising model.


   .. py:method:: circuits() -> List[orquestra.quantum.circuits.Circuit]
      :property:


   .. py:method:: identity() -> PauliSum
      :staticmethod:


   .. py:method:: simplify() -> PauliSum


   .. py:method:: is_constant() -> bool
      :property:


   .. py:method:: n_qubits() -> int
      :property:

      Number of qubits used in this PauliSum.

      Follows the convention of openfermion's `count_qubits`, so that a qubit is
      counted even if there are no operations on it. For example,
      PauliSum("Z0+Z3").n_qubits = 4, but len(PauliSum("Z0+Z3").qubits) = 2.




.. py:class:: PauliTerm(operator: Union[str, Dict[int, str]], coefficient: Optional[complex] = None)

   Representation of a single Pauli Term.

   If coefficient is not provided neither directly nor in the string repr,
   it defaults to 1.0

   .. py:method:: from_iterable(terms: Iterable[Tuple[str, int]], coefficient: complex = 1.0) -> PauliTerm
      :staticmethod:

      Construct PauliTerm from a list of operators.

      A slightly more efficient constructor when all the elements of the term are
      known beforehand. Users should employ this function instead of creating
      individual terms and multiplying.


   .. py:method:: identity() -> PauliTerm
      :staticmethod:


   .. py:method:: copy(new_coefficient: complex = None) -> PauliTerm

      Copy PauliTerm, possibly changing its coefficient to a new one.

      The created copy is deep, in particular internal dictionary storing map
      from qubit indices to operators is also copied.


   .. py:method:: qubits() -> Set[int]
      :property:

      The list of qubit indices associated with this term.


   .. py:method:: is_ising() -> bool
      :property:

      True iff this term is Ising Operator (i.e. contains no X or Y operators)


   .. py:method:: circuit() -> orquestra.quantum.circuits.Circuit
      :property:

      Circuit implementing this Pauli term.

      For efficiency constructed circuit is cached after the first invocation of
      this property.


   .. py:method:: operations() -> FrozenSet[Tuple[int, str]]
      :property:


   .. py:method:: terms() -> List[PauliTerm]
      :property:


   .. py:method:: is_constant() -> bool
      :property:


   .. py:method:: n_qubits() -> int
      :property:

      Number of qubits used in this PauliTerm.

      Follows the convention of openfermion's `count_qubits`.
      Note that this is different from the number of operations. For example,
      PauliTerm("Z0*Z3").n_qubits = 4, but len(PauliTerm("Z0*Z3").qubits) = 2.




.. py:function:: get_expectation_value(qubit_op: quantum.operators._pauli_operators.PauliRepresentation, wavefunction: quantum.wavefunction.Wavefunction, reverse_operator: bool = False) -> complex

   Get the expectation value of a qubit operator with respect to a wavefunction.
   :param qubit_op: the operator
   :param wavefunction: the wavefunction
   :param reverse_operator: whether to reverse order of qubit operator
                            before computing expectation value. This should be True if the convention
                            of the basis states used for the wavefunction is the opposite of the one in
                            the qubit operator. This is the case when the wavefunction uses
                            Rigetti convention (https://arxiv.org/abs/1711.02086) of ordering qubits.

   :returns: the expectation value


.. py:function:: reverse_qubit_order(qubit_operator: quantum.operators._pauli_operators.PauliRepresentation, n_qubits: Optional[int] = None)

   Reverse the order of qubit indices in a qubit operator.

   :param qubit_operator: the operator to be reversed
   :param n_qubits: total number of qubits. Needs to be provided when
                    the size of the system of interest is greater than the size of qubit
                    operator (optional)
   :type n_qubits: int

   :returns: the reversed operator
   :rtype: reversed_op


