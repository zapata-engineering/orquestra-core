:py:mod:`quantum.testing.test_cases_for_backend_tests`
======================================================

.. py:module:: quantum.testing.test_cases_for_backend_tests

.. autoapi-nested-parse::

   Test cases have been generated using the code in
   `orquestra.quantum.testing.generate_cases_for_backend.py`.



Module Contents
---------------

.. py:data:: one_qubit_non_parametric_gates_exp_vals_test_set
   :annotation: = [['I', 'X', None], ['H', 'X', [1, 1, 0, 0]], ['I', 'Y', None], ['H', 'Y', None], ['I', 'Z', [1,...

   

.. py:data:: one_qubit_parametric_gates_exp_vals_test_set
   :annotation: = [['I', 'RX', None, [1.0, 0, 1.0, 0]], ['I', 'RX', [0], [1, 0, 0, 1]], ['I', 'RX', None, None],...

   

.. py:data:: two_qubit_non_parametric_gates_exp_vals_test_set
   :annotation: = [[['I', 'I'], 'CNOT', ['I0', 'X0*X1', 'Y0*Y1', 'Z0*Z1', 'X1', 'Z0'], [1, 0, 0, 1, 0, 1]], [['I',...

   

.. py:data:: two_qubit_parametric_gates_exp_vals_test_set
   :annotation: = [[['I', 'I'], 'CPHASE', None, ['I0', 'X0*X1', 'Y0*Y1', 'Z0*Z1', 'X1', 'Z0'], [1, 0, 0, 1, 0,...

   

.. py:data:: one_qubit_non_parametric_gates_amplitudes_test_set
   :annotation: = [['I', 'I', [1.0, 0.0]], ['H', 'I', None], ['I', 'X', [0.0, 1.0]], ['H', 'X', None], ['I', 'Y',...

   

.. py:data:: one_qubit_parametric_gates_amplitudes_test_set
   :annotation: = [['I', 'RX', None, None], ['I', 'RX', [0], [1, 0]], ['I', 'RX', None, None], ['I', 'RX', None,...

   

.. py:data:: two_qubit_non_parametric_gates_amplitudes_test_set
   :annotation: = [[['I', 'I'], 'CNOT', [1.0, 0.0, 0.0, 0.0]], [['I', 'X'], 'CNOT', [0.0, 1.0, 0.0, 0.0]], [['X',...

   

.. py:data:: two_qubit_parametric_gates_amplitudes_test_set
   :annotation: = [[['I', 'I'], 'CPHASE', None, [1, 0, 0, 0]], [['I', 'I'], 'CPHASE', [0], [1, 0, 0, 0]], [['I',...

   

