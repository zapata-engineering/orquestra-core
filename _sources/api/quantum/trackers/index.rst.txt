:py:mod:`quantum.trackers`
==========================

.. py:module:: quantum.trackers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   quantum.trackers.MeasurementTrackingBackend




.. py:class:: MeasurementTrackingBackend(inner_backend: quantum.api.backend.QuantumBackend, raw_data_file_name: str, record_bitstrings: Optional[bool] = False)

   Bases: :py:obj:`quantum.api.backend.QuantumBackend`

   A wrapper class for a backend that tracks all measurements. The measurements
   are stored in the raw_circuit_data variable as a list of measurement objects.

   .. py:method:: run_circuit_and_measure(circuit: quantum.circuits.Circuit, n_samples: int) -> quantum.measurements.Measurements

      Method for executing the circuit and measuring the outcome.

      :param circuit: quantum circuit to be executed.
      :param n_samples: The number of samples to collect.


   .. py:method:: run_circuitset_and_measure(circuits: Sequence[quantum.circuits.Circuit], n_samples: Sequence[int]) -> List[quantum.measurements.Measurements]

      Run a set of circuits and measure a certain number of bitstrings.

      :param circuits: The circuits to execute.
      :param n_samples: The number of samples to collect for each circuit.


   .. py:method:: record_raw_measurement_data(circuit: quantum.circuits.Circuit, measurement: quantum.measurements.Measurements) -> None

      Append data from a measurement to self.raw_data.

      :param circuit: Implemented circuit.
      :param measurement: Implemented measurement.


   .. py:method:: get_measurement_outcome_distribution(circuit: quantum.circuits.Circuit, n_samples: int) -> quantum.distributions.MeasurementOutcomeDistribution

      Calculates a measurement outcome distribution.

      :param circuit: quantum circuit to be executed.

      :returns: Probability distribution of getting specific bistrings.


   .. py:method:: save_raw_data() -> None



