:py:mod:`quantum.wavefunction`
==============================

.. py:module:: quantum.wavefunction


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   quantum.wavefunction.Wavefunction



Functions
~~~~~~~~~

.. autoapisummary::

   quantum.wavefunction.flip_wavefunction
   quantum.wavefunction.flip_amplitudes
   quantum.wavefunction.load_wavefunction
   quantum.wavefunction.save_wavefunction
   quantum.wavefunction.sample_from_wavefunction



.. py:class:: Wavefunction(amplitude_vector: orquestra.quantum.typing.ParameterizedVector)

   A simple wavefunction data structure that can
   be used to calculate amplitudes of quantum states.

   :param amplitude_vector: the initial amplitudes of the system,
                            can either be a NumPy ndarray or a SymPy Matrix

   .. py:method:: amplitudes(self) -> Union[numpy.ndarray, sympy.Matrix]
      :property:


   .. py:method:: n_qubits(self)
      :property:


   .. py:method:: free_symbols(self) -> Set[sympy.Symbol]
      :property:


   .. py:method:: zero_state(n_qubits: int) -> Wavefunction
      :staticmethod:


   .. py:method:: dicke_state(n_qubits: int, hamming_weight: int) -> Wavefunction
      :staticmethod:


   .. py:method:: bind(self, symbol_map: Dict[sympy.Symbol, Any]) -> Wavefunction


   .. py:method:: get_probabilities(self) -> numpy.ndarray


   .. py:method:: get_outcome_probs(self) -> Dict[str, float]



.. py:function:: flip_wavefunction(wavefunction: Wavefunction)


.. py:function:: flip_amplitudes(amplitudes: Union[Sequence[complex], numpy.ndarray]) -> numpy.ndarray


.. py:function:: load_wavefunction(file: orquestra.quantum.typing.LoadSource) -> Wavefunction

   Load a qubit wavefunction from a file.

   :param file: the name of the file, or a file-like object.
   :type file: str or file-like object

   :returns: the wavefunction object
   :rtype: wavefunction (orquestra.quantum.Wavefunction)


.. py:function:: save_wavefunction(wavefunction: Wavefunction, filename: orquestra.quantum.typing.AnyPath) -> None

   Save a wavefunction object to a file.

   :param wavefunction: the wavefunction object
   :type wavefunction: orquestra.quantum.Wavefunction
   :param filename: the name of the file
   :type filename: str


.. py:function:: sample_from_wavefunction(wavefunction: Wavefunction, n_samples: int, seed: Optional[int] = None) -> List[Tuple[int, Ellipsis]]

   Sample bitstrings from a wavefunction.

   :param wavefunction: the wavefunction to sample from.
   :param n_samples: the number of samples taken. Needs to be greater than 0.
   :param seed: the seed of the sampler

   :returns: A list of tuples where the each tuple is a sampled bitstring.
   :rtype: List[Tuple[int]]


