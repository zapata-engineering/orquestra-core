:py:mod:`vqa.ansatz.quantum_compiling`
======================================

.. py:module:: vqa.ansatz.quantum_compiling


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   vqa.ansatz.quantum_compiling.HEAQuantumCompilingAnsatz




.. py:class:: HEAQuantumCompilingAnsatz(number_of_layers: int, number_of_qubits: int)

   Bases: :py:obj:`orquestra.vqa.api.ansatz.Ansatz`

   .. py:attribute:: supports_parametrized_circuits
      :annotation: = True

      

   .. py:attribute:: number_of_qubits
      

      

   .. py:method:: number_of_params(self) -> int
      :property:

      Returns number of parameters in the ansatz.


   .. py:method:: number_of_params_per_layer(self) -> int
      :property:

      Returns number of parameters in the ansatz.


   .. py:method:: symbols(self) -> List[sympy.Symbol]
      :property:

      Returns a list of symbolic parameters used for creating the ansatz.
      The order of the symbols should match the order in which parameters
      should be passed for creating executable circuit.



