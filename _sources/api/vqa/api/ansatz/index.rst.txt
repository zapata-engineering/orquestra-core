:py:mod:`vqa.api.ansatz`
========================

.. py:module:: vqa.api.ansatz


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   vqa.api.ansatz.Ansatz




Attributes
~~~~~~~~~~

.. autoapisummary::

   vqa.api.ansatz.SymbolsSortKey


.. py:data:: SymbolsSortKey
   

   

.. py:class:: Ansatz(number_of_layers: int)

   Bases: :py:obj:`abc.ABC`, :py:obj:`overrides.EnforceOverrides`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: supports_parametrized_circuits
      :annotation: :Optional[bool]

      

   .. py:attribute:: number_of_layers
      

      

   .. py:method:: parametrized_circuit() -> orquestra.quantum.circuits.Circuit
      :property:

      Returns a parametrized circuit if given ansatz supports it.


   .. py:method:: number_of_qubits() -> int
      :property:

      Returns number of qubits ansatz circuit uses


   .. py:method:: number_of_params() -> int
      :property:

      Returns number of parameters in the ansatz.


   .. py:method:: get_executable_circuit(params: numpy.ndarray) -> orquestra.quantum.circuits.Circuit

      Returns an executable circuit representing the ansatz.
      :param params: circuit parameters


   .. py:method:: symbols_sort_key() -> SymbolsSortKey
      :property:



