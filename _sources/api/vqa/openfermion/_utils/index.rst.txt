:orphan:

:py:mod:`vqa.openfermion._utils`
================================

.. py:module:: vqa.openfermion._utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   vqa.openfermion._utils.exponentiate_fermion_operator
   vqa.openfermion._utils.build_hartree_fock_circuit



.. py:function:: exponentiate_fermion_operator(fermion_generator: Union[openfermion.FermionOperator, openfermion.InteractionOperator], transformation: str = 'Jordan-Wigner', number_of_qubits: Optional[int] = None) -> orquestra.quantum.circuits.Circuit

   Create a circuit corresponding to the exponentiation of an operator.
       Works only for antihermitian fermionic operators.

   :param fermion_generator: fermionic generator.
   :param transformation: The name of the qubit-to-fermion transformation to use.
   :param number_of_qubits: This can be used to force the number of qubits in
                            the resulting operator above the number that appears in the input operator.
                            Defaults to None and the number of qubits in the resulting operator will
                            match the number that appears in the input operator.


.. py:function:: build_hartree_fock_circuit(number_of_qubits: int, number_of_alpha_electrons: int, number_of_beta_electrons: int, transformation: str, spin_ordering: str = 'interleaved') -> orquestra.quantum.circuits.Circuit

   Creates a circuit that prepares the Hartree-Fock state.

   :param number_of_qubits: the number of qubits in the system.
   :param number_of_alpha_electrons: the number of alpha electrons in the system.
   :param number_of_beta_electrons: the number of beta electrons in the system.
   :param transformation: the Hamiltonian transformation to use.
   :param spin_ordering: the spin ordering convention to use. Defaults to "interleaved".

   :returns: a circuit that prepares Hartree-Fock state.
   :rtype: orquestra.quantum.circuit.Circuit


